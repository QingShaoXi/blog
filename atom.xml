<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喝杯零度的酒</title>
  
  <subtitle>书的世界~输不起</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://qingshaoxi.github.io/blog/"/>
  <updated>2019-02-27T07:32:29.946Z</updated>
  <id>https://qingshaoxi.github.io/blog/</id>
  
  <author>
    <name>故往轻叹</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs 开发企业微信第三方应用简明教程</title>
    <link href="https://qingshaoxi.github.io/blog/post/qywx-nodejs.html"/>
    <id>https://qingshaoxi.github.io/blog/post/qywx-nodejs.html</id>
    <published>2019-02-25T02:59:16.000Z</published>
    <updated>2019-02-27T07:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司要开发企业微信端的 worktile，以前做的是企业微信内部应用，由于开发的是企业内部应用，所有只适用于私有部署客户，对于公有云客户就无法使用，所有就准备开发企业微信的第三方应用，本文主要介绍在调研阶段遇到的山珍海味。</p><p>开发之前你需要前注册为第三方服务商，然后用第三方服务商的账号创建应用，创建之后只需要管理员授权应用，第三方服务商即可为用户提供服务。这里我们主要研究第三方服务商注册应用。</p><h3 id="配置开发信息"><a class="markdownIt-Anchor" href="#配置开发信息"></a> 配置开发信息</h3><p>在创建应用之前，首先要配置好通用开发参数</p><p><img src="https://i.loli.net/2019/02/25/5c73680394fae.png" alt="20190225115855.png"></p><p>在填写系统事件接收 url 时，要正确响应企业微信验证 url 的请求。这个可以参考企业微信后台，自建应用的接收消息的 api 设置。</p><p><img src="https://i.loli.net/2019/02/25/5c7369e58cffc.png" alt="20190225120700.png"></p><p>要求填写应用的 URL、Token、EncodingAESKey 三个参数</p><ul><li>URL 是企业后台接收企业微信推送请求的访问协议和地址，支持 http 或 https 协议（为了提高安全性，建议使用 https）。</li><li>Token 可由企业任意填写，用于生成签名。</li><li>EncodingAESKey 用于消息体的加密，是 AES 密钥的 Base64 编码。</li></ul><h4 id="验证-url-有效性"><a class="markdownIt-Anchor" href="#验证-url-有效性"></a> 验证 url 有效性</h4><p>当点击保存的时候，企业微信会发生一条 get 请求到填写的 url</p><p>比如 url 设置的是<code>https://api.worktile.com</code>, 企业微信将发送如下验证请求：</p><p>请求地址：<a href="https://api.worktile.com/?msg_signature=ASDFQWEXZCVAQFASDFASDFSS%C3%97tamp=13500001234&amp;nonce=123412323&amp;echostr=ENCRYPT_STR" target="_blank" rel="noopener">https://api.worktile.com/?msg_signature=ASDFQWEXZCVAQFASDFASDFSS×tamp=13500001234&amp;nonce=123412323&amp;echostr=ENCRYPT_STR</a></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>msg_signature</td><td>企业微信加密签名，msg_signature 结合了企业填写的 token、请求中的 timestamp、nonce 参数、加密的消息体</td></tr><tr><td>timestamp</td><td>时间戳</td></tr><tr><td>nonce</td><td>随机数</td></tr><tr><td>echostr</td><td>加密的字符串。需要解密得到消息内容明文，解密后有random、msg_len、msg、receiveid 四个字段，其中 msg 即为消息内容明文</td></tr></tbody></table><h5 id="通过参数-msg_signature-对请求进行校验"><a class="markdownIt-Anchor" href="#通过参数-msg_signature-对请求进行校验"></a> 通过参数 msg_signature 对请求进行校验</h5><p>首先要把刚才配置时随机生成的 token, timestamp, nonce, msg_encrypt 进行 sha1 加密，这里我们可以直接使用 npm 模块 <a href="https://www.npmjs.com/package/sha1" target="_blank" rel="noopener">sha1</a> 进行加密，然后判断得到的 str 是否和 msg_signature 相等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sha1 --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">'sha1'</span>);</span><br><span class="line"><span class="keyword">const</span> query = req.query;</span><br><span class="line"><span class="keyword">const</span> signature = query.msg_signature;</span><br><span class="line"><span class="keyword">const</span> timestamp = query.timestamp;</span><br><span class="line"><span class="keyword">const</span> nonce = query.nonce;</span><br><span class="line"><span class="keyword">const</span> echostr = query.echostr;</span><br><span class="line"><span class="keyword">const</span> tmpArr = [token, timestamp, nonce, echostr];</span><br><span class="line"><span class="keyword">const</span> tmpStr = sha1(tmpArr.sort().join(<span class="string">''</span>));</span><br><span class="line"><span class="keyword">if</span> (tmpStr === signature) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Check Success'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Check Failed'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解密-echostr-得到-msg-并返回"><a class="markdownIt-Anchor" href="#解密-echostr-得到-msg-并返回"></a> 解密 echostr 得到 msg 并返回</h5><p>密文解密过程：</p><ol><li>对刚才生成的 AESKey 进行 base64 解码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EncodingAESKey = <span class="string">'21IpFqj8qolJbaqPqe1rVTAK5sgkaQ3GQmUKiUQLwRe'</span>;</span><br><span class="line"><span class="keyword">let</span> aesKey = Buffer.from(EncodingAESKey + <span class="string">'='</span>, <span class="string">'base64'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>对 AESKey 进行 aes-256-cbc 解密</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去掉 decipheredBuff 头部的16个随机字节和4个字节的 msg_len，截取 msg_len 长度的部分即为msg，剩下的为尾部的 receiveid</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">let</span> aesCipher = crypto.createDecipheriv(<span class="string">"aes-256-cbc"</span>, aesKey, aesKey.slice(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">aesCipher.setAutoPadding(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> decipheredBuff = Buffer.concat([aesCipher.update(data, <span class="string">'base64'</span>), aesCipher.final()]);</span><br><span class="line">decipheredBuff = PKCS7Decoder(decipheredBuff); <span class="comment">// 微信要求用 pkcs7进行补全</span></span><br><span class="line"><span class="keyword">const</span> len_netOrder_corpid = decipheredBuff.slice(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> msg_len = len_netOrder_corpid.slice(<span class="number">0</span>, <span class="number">4</span>).readUInt32BE(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> result = len_netOrder_corpid.slice(<span class="number">4</span>, msg_len + <span class="number">4</span>).toString();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PKCS7Decoder</span> (<span class="params">buff</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pad = buff[buff.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (pad &lt; <span class="number">1</span> || pad &gt; <span class="number">32</span>) &#123;</span><br><span class="line">    pad = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buff.slice(<span class="number">0</span>, buff.length - pad);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>然后返回 result 即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.end(result);</span><br></pre></td></tr></table></figure><h3 id="测试应用"><a class="markdownIt-Anchor" href="#测试应用"></a> 测试应用</h3><p>应用创建成功后，服务商可以授权 10 个测试企业</p><p><img src="https://i.loli.net/2019/02/25/5c738cb169625.png" alt="20190225143525.png"></p><p>从企业微信应用市场发起授权时，企业微信给刚才应用设置的<code>指令回调 url</code> 发送一个 post 请求，比如：<br><code>https://api.worktile.com/worktile?msg_signature=b99605616153ffbfbe6ebbb500bd211e67ed714d&amp;timestamp=1551076894&amp;nonce=1551709703</code>，直接返回成功即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/worktile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'req.body'</span>, req.body);</span><br><span class="line">  res.send(<span class="string">'success'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="应用上线"><a class="markdownIt-Anchor" href="#应用上线"></a> 应用上线</h3><p>已认证企业微信的服务商，可进入应用管理—点击提交上线—勾选应用—提交上线。</p><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><ul><li>本文更新于 2019 年 2 月 25 日，api 可能有时效性，如有差异，以 <a href="https://work.weixin.qq.com/api/doc#90001/90142/90594" target="_blank" rel="noopener">官方 api</a> 为准。</li><li>worktile 正在开发测试 企业微信、钉钉、h5 端，上线之后欢迎使用。</li><li><a href="https://raw.githubusercontent.com/whyour/yiyanApi/master/server.js" target="_blank" rel="noopener">完整 demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司要开发企业微信端的 worktile，以前做的是企业微信内部应用，由于开发的是企业内部应用，所有只适用于私有部署客户，对于公有云客户就无法使用，所有就准备开发企业微信的第三方应用，本文主要介绍在调研阶段遇到的山珍海味。&lt;/p&gt;
&lt;p&gt;开发之前你需要前注册为第三方服务
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://qingshaoxi.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>javascript 中的 es6 技巧 2</title>
    <link href="https://qingshaoxi.github.io/blog/post/javascript-pro-tips-2.html"/>
    <id>https://qingshaoxi.github.io/blog/post/javascript-pro-tips-2.html</id>
    <published>2019-02-18T03:30:45.000Z</published>
    <updated>2019-02-27T07:32:29.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取某年某月有多少天"><a class="markdownIt-Anchor" href="#获取某年某月有多少天"></a> 获取某年某月有多少天</h3><p>此处借用 Date api 创建时间的时候超出的时间会自动顺延到下个月。比如<code>new Date(2019, 0, 32)</code>就会自动顺延到 2019 年 2 月 1 日，这样就可以直接用 32 减去 1 就可以得出 1 月份的天数，当然 32 只是一个最小数，你也可以用 33、34…<br>那如果说往大取可以，往小取是不是也可以，答案是肯定的。比如<code>new Date(2019, 0, 0)</code>就会取到 2018 年的 12 月 31 日，这样我们就可以直接取到上个月的总天数，要取指定月的天数，只需给指定月数 month + 1 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这两个函数是等效的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateOfMonth</span>(<span class="params">year, month</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">32</span>).getDate();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">32</span> - date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateOfMonth</span>(<span class="params">year, month</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year, month + <span class="number">1</span>, <span class="number">0</span>).getDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求闰年的 2 月份天数</span></span><br><span class="line"><span class="comment">// 29</span></span><br><span class="line">getDateOfMonth(<span class="number">2000</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求非闰年的 2 月份天数</span></span><br><span class="line"><span class="comment">// 28</span></span><br><span class="line">getDateOfMonth(<span class="number">2001</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求大月的天数</span></span><br><span class="line"><span class="comment">// 31</span></span><br><span class="line">getDateOfMonth(<span class="number">2001</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求小月的天数</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line">getDateOfMonth(<span class="number">2001</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="对一个数取幂"><a class="markdownIt-Anchor" href="#对一个数取幂"></a> 对一个数取幂</h3><p>这时候我们可以使用 <code>Math.pow()</code>，但是我们更推荐使用取幂运算符 <code>**</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="对象结构用在数组上"><a class="markdownIt-Anchor" href="#对象结构用在数组上"></a> 对象结构用在数组上</h3><h4 id="获取数组的长度"><a class="markdownIt-Anchor" href="#获取数组的长度"></a> 获取数组的长度</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="number">0</span>: a, <span class="number">1</span>: b, <span class="attr">length</span>: l&#125; = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">a === <span class="string">'a'</span>;</span><br><span class="line">b === <span class="string">'b'</span>;</span><br><span class="line">l === <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="还可以获取数组最后一个元素"><a class="markdownIt-Anchor" href="#还可以获取数组最后一个元素"></a> 还可以获取数组最后一个元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">length</span>: l, [l<span class="number">-1</span>]: last, ...rest&#125; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">l === <span class="number">3</span>;</span><br><span class="line">last === <span class="number">3</span>;</span><br><span class="line">rest <span class="comment">// &#123;0: 1, 1: 2&#125;</span></span><br></pre></td></tr></table></figure><p>不只是 length，数组的其他方法，比如 join、push 等方法也是可以解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">map</span>: m, <span class="attr">push</span>: p&#125; = []</span><br><span class="line">m === <span class="built_in">Array</span>.prototype.map <span class="comment">// true</span></span><br><span class="line">m === [].__proto__.map <span class="comment">// true</span></span><br><span class="line">p === <span class="built_in">Array</span>.prototype.push <span class="comment">// true</span></span><br><span class="line">p === [].__proto__.push <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 Array 的原型链也可以解析 Object.prototype 上的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.__proto__.hasOwnProperty === <span class="built_in">Object</span>.prototype.hasOwnProperty <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">hasOwnProperty</span>: hop&#125; = []</span><br><span class="line">hop === <span class="built_in">Object</span>.prototype.hasOwnProperty <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这样就可以看出，解构操作会沿着当前对象及其原型链一直向上找，直到 <code>Object.prototype.__proto__</code> 对象，如果被解构的对象及其原型链上不存在该属性，则返回 <code>undefined</code>。</p><h4 id="将数组转为对象"><a class="markdownIt-Anchor" href="#将数组转为对象"></a> 将数组转为对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ...obj &#125; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">obj <span class="comment">// =&gt; &#123;0: 1, 1: 2, 2: 3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;获取某年某月有多少天&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#获取某年某月有多少天&quot;&gt;&lt;/a&gt; 获取某年某月有多少天&lt;/h3&gt;
&lt;p&gt;此处借用 Date api 创建时间的时候超出的时间会自动顺延到下个月。比如&lt;code&gt;new 
      
    
    </summary>
    
    
      <category term="js" scheme="https://qingshaoxi.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6 实现斐波那契数列</title>
    <link href="https://qingshaoxi.github.io/blog/post/es6-fibolachian-sequence.html"/>
    <id>https://qingshaoxi.github.io/blog/post/es6-fibolachian-sequence.html</id>
    <published>2019-01-17T15:26:00.000Z</published>
    <updated>2019-02-27T07:32:29.927Z</updated>
    
    <content type="html"><![CDATA[<p>某一天，旁边的同事问我，知道斐波什么数吗。我说，不知道。同事又说，这不是面试必问的吗。我尴尬又不失优雅的一笑🤓🤓🤓。</p><h3 id="什么是斐波那契数列"><a class="markdownIt-Anchor" href="#什么是斐波那契数列"></a> 什么是斐波那契数列</h3><p>首先它是一个数列，在数学上是以递归的方法定义</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F_{0}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F_{1}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>(</mo><mi>n</mi><mo>≧</mo><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">F_{n}=F_{n-1}+F_{n-2}  (n≧2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.01166em;vertical-align:-0.25583em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">≧</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></li></ul><p>简单来说，就是第一个和第二个数字是 0 和 1，后面的数字都是前两个数字的和。</p><p>现在我们的问题是求第二十个斐波那契数或者求最接近某个数的斐波那契数。</p><h3 id="es5-实现"><a class="markdownIt-Anchor" href="#es5-实现"></a> es5 实现</h3><p>其实只需要构造一个递归的函数即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n===<span class="number">0</span> || n===<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fibonacci(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_fibolachian</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> cache[n] === <span class="string">'number'</span></span><br><span class="line">      ? cache[n]</span><br><span class="line">      : cache[n] = _fibolachian(n - <span class="number">1</span>) + _fibolachian(n - <span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">fibonacci(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>第一种粗暴解决，但是速度令人堪忧。第二种利用缓存，极大优化处理时间。这种方法每次只能返回一个数据，都无法优雅地解决我们的问题。</p><h3 id="es6-实现"><a class="markdownIt-Anchor" href="#es6-实现"></a> es6 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib_generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [current, next] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> current;</span><br><span class="line">    [next, current] = [next+current, next];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fib = fib_generator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取前20个斐波那契数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fib.next().value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取斐波那契数小于10000的所有数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> fib_generator()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181</span></span><br></pre></td></tr></table></figure><p>es6实现中主要使用了<code>generator function</code>、<code>yield</code>、<code>数组结构</code>等特性。<br>&gt; <code>generator function</code>是就是ES6中的生成器函数，写起来很简单，只要在<code>function</code>后面加上一个<code>*</code>号即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo1</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo2</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo3</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br></pre></td></tr></table></figure><p>调用生成器函数会产生一个生成器（generator）。生成器拥有的最重要的方法是 next()，用来迭代：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo();</span><br><span class="line">bar.next(); <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>next 方法返回一个拥有 value 和 done 两个字段的对象。</p><p>生成器函数通常和 yield 关键字同时使用。函数执行到每个 yield 时都会中断并返回 yield 的值（通过 next 方法返回对象中的 value 字段）。下次调用 next，函数会从 yield 的下一个语句继续执行。等到整个函数执行完，next 方法返回的 done 字段会变成 true。</p><p>所以通过<code>fib.next().value</code>就会循环得到前 20 个斐波那契数。</p><p>如果一直调用 next()方法也太费劲了，这就要说明生成器函数也是可遍历的，它是一个可迭代对象，一个定义了迭代行为的对象，比如在 for…of 中循环了哪些值。一些内置类型，如 Array 或 Map 具有默认的迭代行为，而其他类型（如 Object）没有。所以只要使用 for 循环就可以了，遍历得到的值就是<code>yield</code>返回的值，用生成器函数来产生斐波那契数列既高效又直观。</p><p>除此之外，生成器还有一个 return 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="string">'foo'</span>)); <span class="comment">// &#123; value: "foo", done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>可以得知 return 方法会返回指定的值并结束生成器。而当生成器函数已经结束的时候，再去调用 return 方法，则也会返回给定值，并且结束生成器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;<span class="keyword">yield</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">1</span>)); <span class="comment">// &#123; value: 1, done: true &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某一天，旁边的同事问我，知道斐波什么数吗。我说，不知道。同事又说，这不是面试必问的吗。我尴尬又不失优雅的一笑🤓🤓🤓。&lt;/p&gt;
&lt;h3 id=&quot;什么是斐波那契数列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是斐波那契数列&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://qingshaoxi.github.io/blog/tags/ES6/"/>
    
      <category term="Fibonacci" scheme="https://qingshaoxi.github.io/blog/tags/Fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>在eggjs中使用sharp完成图片操作</title>
    <link href="https://qingshaoxi.github.io/blog/post/egg-image-resize.html"/>
    <id>https://qingshaoxi.github.io/blog/post/egg-image-resize.html</id>
    <published>2018-12-23T08:01:57.000Z</published>
    <updated>2019-02-27T07:32:29.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>egg是阿里开发的一个基于koa，遵循「约定大于配置」的原则，支持多进程的一个服务端框架，有许多插件，目前官方是JavaScript写的，但是通过插件是可以支持typescript，目前我们公司就有内部项目是在使用。本文主要介绍在eggjs中对图片的处理。<br>egg支持两种方式上传文件，stream和file，stream就是nodejs中的流式上传，而file模式是会把图片先保存在服务端，然后用路径取访问。具体内容见 <a href="https://eggjs.org/en/plugins/multipart.html" target="_blank" rel="noopener">egg-multipart</a>，本文主要使用<a href="https://github.com/lovell/sharp" target="_blank" rel="noopener">sharp</a>完成图片裁剪操作，当然sharp不止于裁剪。</p></blockquote><h3 id="file-模式"><a class="markdownIt-Anchor" href="#file-模式"></a> file 模式</h3><p>file模式中上传一般不会有任何问题，file模式支持定时清理服务器上的缓存文件，通过访问<code>this.ctx.request.files</code>就可访问到所有上传的文件。然后通过sharp操作图片。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'mz/fs'</span>);</span><br><span class="line"><span class="keyword">const</span> sharp = <span class="built_in">require</span>(<span class="string">'sharp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">class</span> <span class="keyword">extends</span> Controller &#123;</span><br><span class="line">  <span class="keyword">async</span> upload() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'got %d files'</span>, ctx.request.files.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> file of ctx.request.files) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'field: '</span> + file.fieldname);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'filename: '</span> + file.filename);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'encoding: '</span> + file.encoding);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mime: '</span> + file.mime);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tmp filepath: '</span> + file.filepath);</span><br><span class="line">      <span class="keyword">let</span> result;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// process file or upload to cloud storage</span></span><br><span class="line">        <span class="keyword">const</span> resizeImage = <span class="keyword">await</span> sharp(file.filepath)</span><br><span class="line">          .rotate()</span><br><span class="line">          .resize(<span class="number">160</span>, <span class="number">160</span>)</span><br><span class="line">          .toBuffer();</span><br><span class="line">        result = <span class="keyword">await</span> ctx.oss.put(<span class="string">'egg-multipart-test/'</span> + file.filename, file.filepath);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// need to remove the tmp files</span></span><br><span class="line">        <span class="keyword">await</span> ctx.cleanupRequestFiles();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="stream模式"><a class="markdownIt-Anchor" href="#stream模式"></a> stream模式</h3><p>stream模式不需要缓存图片，但是关键是需要复制图片流，幸运的是sharp支持复制图片流，以输出不同规格的图片。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"><span class="keyword">const</span> sharp = <span class="built_in">require</span>(<span class="string">'sharp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">class</span> <span class="keyword">extends</span> Controller &#123;</span><br><span class="line">  <span class="keyword">async</span> upload() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> parts = ctx.multipart();</span><br><span class="line">    <span class="keyword">let</span> part;</span><br><span class="line">    <span class="keyword">while</span> ((part = <span class="keyword">await</span> parts()) != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (part.length) &#123;</span><br><span class="line">        <span class="comment">// arrays are busboy fields</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'field: '</span> + part[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'value: '</span> + part[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'valueTruncated: '</span> + part[<span class="number">2</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fieldnameTruncated: '</span> + part[<span class="number">3</span>]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!part.filename) &#123;</span><br><span class="line">          <span class="comment">// user click `upload` before choose a file,</span></span><br><span class="line">          <span class="comment">// `part` will be file stream, but `part.filename` is empty</span></span><br><span class="line">          <span class="comment">// must handler this, such as log error.</span></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// otherwise, it's a stream</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'field: '</span> + part.fieldname);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'filename: '</span> + part.filename);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'encoding: '</span> + part.encoding);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'mime: '</span> + part.mime);</span><br><span class="line">        <span class="keyword">const</span> stream = sharp();</span><br><span class="line">        file.pipe(stream);</span><br><span class="line">        <span class="keyword">const</span> rotateImg = stream.clone().rotate();</span><br><span class="line">        <span class="keyword">const</span> resizeImg = stream.clone().resize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// sharp返回的是sharp类型的`readable stream`，可以直接传到s3</span></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'and we are done parsing the form!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;egg是阿里开发的一个基于koa，遵循「约定大于配置」的原则，支持多进程的一个服务端框架，有许多插件，目前官方是JavaScript写的，但是通过插件是可以支持typescript，目前我们公司就有内部项目是在使用。本文主要介绍在eggjs中对图片
      
    
    </summary>
    
    
      <category term="eggjs" scheme="https://qingshaoxi.github.io/blog/tags/eggjs/"/>
    
      <category term="sharp" scheme="https://qingshaoxi.github.io/blog/tags/sharp/"/>
    
  </entry>
  
  <entry>
    <title>css文本背景动画</title>
    <link href="https://qingshaoxi.github.io/blog/post/css-text-background-animation.html"/>
    <id>https://qingshaoxi.github.io/blog/post/css-text-background-animation.html</id>
    <published>2018-12-16T12:21:36.000Z</published>
    <updated>2019-02-27T07:32:29.924Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍css中的文本背景动画。</p><a id="more"></a><h3 id="创建html"><a class="markdownIt-Anchor" href="#创建html"></a> 创建html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>text background animation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"animated"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css文件"><a class="markdownIt-Anchor" href="#css文件"></a> css文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://user-images.githubusercontent.com/22700758/50053518-4f026500-0171-11e9-859f-7cb5217ac40f.png'</span>) no-repeat center center/cover;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animated</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Charm'</span>, cursive;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://user-images.githubusercontent.com/22700758/50053499-3c882b80-0171-11e9-830a-48d727bc0805.png'</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">animation</span>: moveBg <span class="number">90s</span> linear infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: moveBg <span class="number">90s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> moveBg &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">30%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍css中的文本背景动画。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://qingshaoxi.github.io/blog/tags/css/"/>
    
      <category term="animation" scheme="https://qingshaoxi.github.io/blog/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>使用typescript和html开发vue</title>
    <link href="https://qingshaoxi.github.io/blog/post/vue-typescript-html.html"/>
    <id>https://qingshaoxi.github.io/blog/post/vue-typescript-html.html</id>
    <published>2018-12-02T15:49:37.000Z</published>
    <updated>2019-02-27T07:32:29.961Z</updated>
    
    <content type="html"><![CDATA[<p>本篇将介绍如何用typescript和html开发vue，因为博主在主要开发angular，对于js文件和模板写在一起感觉很臃肿，而且方法都需要逗号分隔，变量声明也不友好。<br>所有翻山越岭，发现vue官方已经开发了对typescript的支持 <a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a><br>还有对<code>@Prop</code>、<code>@Emit</code>、<code>@Inject</code>、<code>@Model</code>、<code>@Watch</code>等支持的 <a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">vue-property-decorator</a><br>但是<code>@Component</code>不支持<code>templateUrl</code>，所以用到了 <a href="https://github.com/ktsn/vue-template-loader" target="_blank" rel="noopener">vue-template-loader</a>。</p><h3 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save vue vue-class-component vue-property-decorator</span><br><span class="line">npm i --save-dev css-loader ts-loader typescript vue-loader vue-template-compiler vue-template-loader webpack webpack-cli</span><br></pre></td></tr></table></figure><h3 id="创建tsconfigjson"><a class="markdownIt-Anchor" href="#创建tsconfigjson"></a> 创建tsconfig.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="attr">"outDir"</span>: <span class="string">"./built/"</span>,</span><br><span class="line">      <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"noImplicitReturns"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">      <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">      <span class="string">"./src/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见webpack配置文件"><a class="markdownIt-Anchor" href="#常见webpack配置文件"></a> 常见webpack配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">    filename: <span class="string">'build.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">            <span class="string">'scss'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader'</span>,</span><br><span class="line">            <span class="string">'sass'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-template-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/index.html/</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          transformToRequire: &#123;</span><br><span class="line">            img: <span class="string">'src'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'#source-map'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加声明文件"><a class="markdownIt-Anchor" href="#添加声明文件"></a> 添加声明文件</h3><p>由于vue没有默认export Vue，所以需要在项目下自己声明，避免ts编译出错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.html' &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue, &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> WithRender &#123;</span><br><span class="line">    &lt;V <span class="keyword">extends</span> Vue&gt;(options: ComponentOptions&lt;V&gt;): ComponentOptions&lt;V&gt;</span><br><span class="line">    &lt;V <span class="keyword">extends</span> <span class="keyword">typeof</span> Vue&gt;(component: V): V</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> withRender: WithRender;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> withRender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/whyour/vue-typescript-demo" target="_blank" rel="noopener">完整demo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇将介绍如何用typescript和html开发vue，因为博主在主要开发angular，对于js文件和模板写在一起感觉很臃肿，而且方法都需要逗号分隔，变量声明也不友好。&lt;br&gt;
所有翻山越岭，发现vue官方已经开发了对typescript的支持 &lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://qingshaoxi.github.io/blog/tags/typescript/"/>
    
      <category term="vue" scheme="https://qingshaoxi.github.io/blog/tags/vue/"/>
    
      <category term="html" scheme="https://qingshaoxi.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>typescript中type和interface的区别</title>
    <link href="https://qingshaoxi.github.io/blog/post/typescript-types-vs-interfaces.html"/>
    <id>https://qingshaoxi.github.io/blog/post/typescript-types-vs-interfaces.html</id>
    <published>2018-11-25T14:40:03.000Z</published>
    <updated>2019-02-27T07:32:29.959Z</updated>
    
    <content type="html"><![CDATA[<p>在typescript中有两种类型生命方式，<code>interface</code>和<code>type</code>，本文将介绍将介绍<code>interface</code>和<code>type</code>在声明时的不同。<br>interface可以重复声明，typescript会将他们合并。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">    height: <span class="built_in">number</span>;</span><br><span class="line">    width: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">    scale: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而type不可重复声明。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Box &#123;</span><br><span class="line">    height: <span class="built_in">number</span>;</span><br><span class="line">    width: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Box &#123;</span><br><span class="line">    scale: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ts] Duplicate identifier 'Box'.</span></span><br></pre></td></tr></table></figure><p><code>interface</code>能用于extends或者<code>implements</code>，而<code>type</code>不可以。<br>An interface may only extend a class or another interface.<br>A class may only implement another class or interface.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在typescript中有两种类型生命方式，&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;，本文将介绍将介绍&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;在声明时的不同。&lt;br&gt;
interface可以重复
      
    
    </summary>
    
    
      <category term="typescript" scheme="https://qingshaoxi.github.io/blog/tags/typescript/"/>
    
      <category term="interface" scheme="https://qingshaoxi.github.io/blog/tags/interface/"/>
    
      <category term="type" scheme="https://qingshaoxi.github.io/blog/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>hexo博文摘要生成方案</title>
    <link href="https://qingshaoxi.github.io/blog/post/hexo-yilia-auto-excerpt.html"/>
    <id>https://qingshaoxi.github.io/blog/post/hexo-yilia-auto-excerpt.html</id>
    <published>2018-11-18T13:21:55.000Z</published>
    <updated>2019-02-27T07:32:29.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm模块按长度截取"><a class="markdownIt-Anchor" href="#npm模块按长度截取"></a> npm模块（按长度截取）</h3><p>npm模块基本都是按照字数截取，你可以设置要固定长度的文章设为摘要，但是对于代码片段来说很不方便。<br><a href="https://www.npmjs.com/package/hexo-auto-excerpt" target="_blank" rel="noopener">hexo-auto-excerpt</a><br><a href="https://www.npmjs.com/package/hexo-excerpt" target="_blank" rel="noopener">hexo-excerpt</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-auto-excerpt</span><br></pre></td></tr></table></figure><p>博客根目录安装，然后在主题配置文件中配置<code>excerpt_length</code>即可。</p><h3 id="自定义按行数截取"><a class="markdownIt-Anchor" href="#自定义按行数截取"></a> 自定义按行数截取</h3><p>第二种我们可以按照文章的行数截取，这就要求你在前面几行写出文章的概要。具体实现需要更改下<code>ejs</code>模板，本主题需要修改<code>layout/_partial/article.ejs</code>，在<code>div.article-entry</code>中添加如下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">index</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.excerpt</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.excerpt</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span> (<span class="attr">theme.auto_excerpt.enable</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">br_position</span> = <span class="string">0</span> %&gt;</span></span><br><span class="line">        &lt;% for (var br_count = 0; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">br_position</span> = <span class="string">post.content.indexOf(</span>'\<span class="attr">n</span>',<span class="attr">br_position</span> + <span class="attr">1</span>) %&gt;</span></span><br><span class="line">            &lt;% if(br_position &lt; 0) &#123; break &#125; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">br_position</span> &gt;</span> 0) &#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">show_all_content</span> = <span class="string">false</span> %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content.substring</span>(<span class="attr">0</span>, <span class="attr">br_position</span> + <span class="attr">1</span>) %&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">toc</span>', &#123; <span class="attr">post:</span> <span class="attr">post</span>&#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>主题中的配置文件增加如下行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    lines:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这样每篇博文的前三行就会被截取为博文的摘要。</p><h3 id="使用hexo-read-more标识"><a class="markdownIt-Anchor" href="#使用hexo-read-more标识"></a> 使用hexo read more标识</h3><p>在博文中你想要截取的地方添加<code>&lt;!-- more --&gt;</code>即可。这样在本标识之前的就为博文摘要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;npm模块按长度截取&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#npm模块按长度截取&quot;&gt;&lt;/a&gt; npm模块（按长度截取）&lt;/h3&gt;
&lt;p&gt;npm模块基本都是按照字数截取，你可以设置要固定长度的文章设为摘要，但是对于代码片段来说很不
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://qingshaoxi.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Angular6组件之间数据通信</title>
    <link href="https://qingshaoxi.github.io/blog/post/sharing-data-between-angular-component.html"/>
    <id>https://qingshaoxi.github.io/blog/post/sharing-data-between-angular-component.html</id>
    <published>2018-11-18T08:27:11.000Z</published>
    <updated>2019-02-27T07:32:29.951Z</updated>
    
    <content type="html"><![CDATA[<p>在本篇中，将介绍基本的父子组件、兄弟组件、任意组件之间的数据通信方式。</p><h3 id="parent-to-child-via-input-decorator"><a class="markdownIt-Anchor" href="#parent-to-child-via-input-decorator"></a> Parent to Child via Input Decorator</h3><p>父组件向子组件传递数据的时候，可以使用在子组件中使用<code>Input Decorator</code>，这样在父组件中就可以通过模板传递给子组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;app-child [childMessage]="parentMessage"&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./parent.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line">  <span class="keyword">public</span> parentMessage = <span class="string">"message from parent"</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">      Say &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./child.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() childMessage: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="child-to-parent-via-viewchild"><a class="markdownIt-Anchor" href="#child-to-parent-via-viewchild"></a> Child to Parent via ViewChild</h3><p>ViewChild允许将一个组件注入另一个组件，使父组件可以访问其属性和功能。但有一点需要注意的是，在视图初始化之后，子组件才可用。这意味着我们需要实现AfterViewInit生命周期钩子来接收来自子组件的数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild, AfterViewInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ChildComponent &#125; <span class="keyword">from</span> <span class="string">"../child/child.component"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    Message: &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;app-child&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./parent.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent <span class="keyword">implements</span> AfterViewInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ViewChild</span>(ChildComponent) child;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="keyword">this</span>.child.message;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./child.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message = <span class="string">'Hello World!'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="child-to-parent-via-output-and-eventemitter"><a class="markdownIt-Anchor" href="#child-to-parent-via-output-and-eventemitter"></a> Child to Parent via Output and EventEmitter</h3><p>子组件还可以通过<code>emit</code>的方式将数据广播出去，这样可以在子组件需要通过事件触发来传递数据到父组件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    Message: &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;app-child (messageEvent)="receiveMessage($event)"&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./parent.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  receiveMessage($event): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = $event;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;button (click)="sendMessage()"&gt;Send Message&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./child.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message: <span class="built_in">string</span> = <span class="string">"Hello World!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Output</span>() messageEvent = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  sendMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.messageEvent.emit(<span class="keyword">this</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="share-data-between-any-components"><a class="markdownIt-Anchor" href="#share-data-between-any-components"></a> Share data between any components</h3><p>当组件间没有直接的关系的时候，我们可以创建一个共享服务，然后通过<code>Rxjs</code>中的<code>BehaviorSubject</code>来存储数据，这样每个组件通过订阅这个数据，当这个数据发生变化的时候，都可以获得最新的数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data.service.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DataService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> currentMessage = <span class="keyword">new</span> BehaviorSubject&lt;<span class="built_in">string</span>&gt;(<span class="string">'default message'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  changeMessage(message: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.messageSource.next(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parent.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DataService &#125; <span class="keyword">from</span> <span class="string">"../data.service"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-parent'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./sibling.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: DataService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.currentMessage.subscribe(<span class="function"><span class="params">message</span> =&gt;</span> <span class="keyword">this</span>.message = message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// siblings.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DataService &#125; <span class="keyword">from</span> <span class="string">"../data.service"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-sibling'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;button (click)="newMessage()"&gt;New Message&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./sibling.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SiblingComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> message: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: DataService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.currentMessage.subscribe(<span class="function"><span class="params">message</span> =&gt;</span> <span class="keyword">this</span>.message = message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newMessage(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.changeMessage(<span class="string">"Hello from Sibling"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="other-library-for-angular-state-management"><a class="markdownIt-Anchor" href="#other-library-for-angular-state-management"></a> Other Library For Angular State Management</h3><p><a href="https://github.com/ngrx/platform" target="_blank" rel="noopener">ngrx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在本篇中，将介绍基本的父子组件、兄弟组件、任意组件之间的数据通信方式。&lt;/p&gt;
&lt;h3 id=&quot;parent-to-child-via-input-decorator&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#parent-to-child-
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="angular6" scheme="https://qingshaoxi.github.io/blog/tags/angular6/"/>
    
      <category term="component" scheme="https://qingshaoxi.github.io/blog/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>javascript 中的 es6 技巧</title>
    <link href="https://qingshaoxi.github.io/blog/post/javascript-pro-tips.html"/>
    <id>https://qingshaoxi.github.io/blog/post/javascript-pro-tips.html</id>
    <published>2018-11-11T12:41:31.000Z</published>
    <updated>2019-02-27T07:32:29.937Z</updated>
    
    <content type="html"><![CDATA[<p>如何优雅地写代码，增加代码的可阅读性。JavaScript Pro Tips！</p><h3 id="how-to-use-consolelog"><a class="markdownIt-Anchor" href="#how-to-use-consolelog"></a> how to use console.log</h3><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = &#123; name: <span class="string">'tom'</span>, age: <span class="number">30</span>, nervous: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> bar = &#123; name: <span class="string">'dick'</span>, age: <span class="number">40</span>, nervous: <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> baz = &#123; name: <span class="string">'harry'</span>, age: <span class="number">50</span>, nervous: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Code 💩'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br><span class="line"><span class="built_in">console</span>.log(baz);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Good Code ✅'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Computed Property Names</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%c My Friends'</span>, <span class="string">'color: orange; font-weight: bold;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(&#123; foo, bar, baz &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Console.table(...)</span></span><br><span class="line"><span class="built_in">console</span>.table([foo, bar, baz]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// // Console.time</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'looper'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">1000000</span>) &#123; i ++ &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'looper'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // Stack Trace Logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteMe = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.trace(<span class="string">'bye bye database'</span>);</span><br><span class="line"></span><br><span class="line">deleteMe();</span><br><span class="line">deleteMe();</span><br></pre></td></tr></table></figure><h3 id="object-destructuring"><a class="markdownIt-Anchor" href="#object-destructuring"></a> Object Destructuring</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> turtle = &#123;</span><br><span class="line">    name: <span class="string">'Bob 🐢'</span>,</span><br><span class="line">    legs: <span class="number">4</span>,</span><br><span class="line">    shell: <span class="literal">true</span>, </span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'amphibious'</span>,</span><br><span class="line">    meal: <span class="number">10</span>,</span><br><span class="line">    diet: <span class="string">'berries'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Code 💩'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;animal.name&#125;</span> <span class="subst">$&#123;animal.meal&#125;</span> kilos of <span class="subst">$&#123;animal.diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Good Code ✅'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">&#123; name, meal, diet &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feed</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, meal, diet &#125; = animal;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Feed <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;meal&#125;</span> kilos of <span class="subst">$&#123;diet&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(feed(turtle));</span><br></pre></td></tr></table></figure><h3 id="template-literals"><a class="markdownIt-Anchor" href="#template-literals"></a> Template Literals</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> horse = &#123;</span><br><span class="line">    name: <span class="string">'Topher 🐴'</span>,</span><br><span class="line">    size: <span class="string">'large'</span>,</span><br><span class="line">    skills: [<span class="string">'jousting'</span>, <span class="string">'racing'</span>],</span><br><span class="line">    age: <span class="number">7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Bad String Code 💩'</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> bio = horse.name + <span class="string">' is a '</span> + horse.size + <span class="string">' horse skilled in '</span> + horse.skills.join(<span class="string">' &amp; '</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Good String Code ✅'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, size, skills &#125; = horse;</span><br><span class="line">bio = <span class="string">`<span class="subst">$&#123;name&#125;</span> is a <span class="subst">$&#123;size&#125;</span> horse skilled in <span class="subst">$&#123;skills.join(' &amp; ')&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bio);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Advanced Tag Example</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">horseAge</span>(<span class="params">str, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ageStr = age &gt; <span class="number">5</span> ? <span class="string">'old'</span> : <span class="string">'young'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;str[0]&#125;</span><span class="subst">$&#123;ageStr&#125;</span> at <span class="subst">$&#123;age&#125;</span> years`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bio2 = horseAge<span class="string">`This horse is <span class="subst">$&#123;horse.age&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bio2);</span><br></pre></td></tr></table></figure><h3 id="spread-syntax"><a class="markdownIt-Anchor" href="#spread-syntax"></a> Spread Syntax</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Objects</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hunter = &#123; name: <span class="string">'Hunter 🐹'</span>  &#125;;</span><br><span class="line"><span class="keyword">const</span> stats = &#123; hp: <span class="number">40</span>, attack: <span class="number">60</span>, defense: <span class="number">45</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Object Code 💩'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hunter[<span class="string">'hp'</span>] = stats.hp;</span><br><span class="line">hunter[<span class="string">'attack'</span>] = stats.attack;</span><br><span class="line">hunter[<span class="string">'defense'</span>] = stats.defense;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lvl0 = <span class="built_in">Object</span>.assign(hunter, stats);</span><br><span class="line"><span class="keyword">const</span> lvl1 = <span class="built_in">Object</span>.assign(hunter, &#123; hp: <span class="number">45</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">'Good Object Code ✅'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lvl0 = &#123; ...hunter, ...stats &#125;;</span><br><span class="line"><span class="keyword">const</span> lvl1 = &#123; ...hunter, hp: <span class="number">45</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrays</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pokemon = [<span class="string">'Arbok'</span>, <span class="string">'Raichu'</span>, <span class="string">'Sandshrew'</span>];</span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Array Code 💩'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pokemon.push(<span class="string">'Bulbasaur'</span>);</span><br><span class="line">pokemon.push(<span class="string">'Metapod'</span>);</span><br><span class="line">pokemon.push(<span class="string">'Weedle'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">'Good Array Code ✅'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Push </span></span><br><span class="line">pokemon = [...pokemon, <span class="string">'Bulbasaur'</span>, <span class="string">'Metapod'</span>, <span class="string">'Weedle'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shift</span></span><br><span class="line"></span><br><span class="line">pokemon = [<span class="string">'Bulbasaur'</span>, ...pokemon, <span class="string">'Metapod'</span>, <span class="string">'Weedle'</span>, ];</span><br></pre></td></tr></table></figure><h3 id="rest-params"><a class="markdownIt-Anchor" href="#rest-params"></a> rest-params</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">'Bad Function Code 💩'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">totalHitPoints</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'Good Function Code ✅'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">totalHitPoints</span>(<span class="params">...hits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hits.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">totalHitPoints(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,);</span><br></pre></td></tr></table></figure><h3 id="loops"><a class="markdownIt-Anchor" href="#loops"></a> loops</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> orders = [<span class="number">500</span>, <span class="number">30</span>, <span class="number">99</span>, <span class="number">15</span>, <span class="number">223</span>];</span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Loop Code 💩'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> withTax = [];</span><br><span class="line"><span class="keyword">const</span> highValue = [];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; orders.length; i++) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reduce</span></span><br><span class="line">    total += orders[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map</span></span><br><span class="line">    withTax.push(orders[i] * <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Filter</span></span><br><span class="line">    <span class="keyword">if</span> (orders[i] &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        highValue.push(orders[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Good Loop Code ✅'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce</span></span><br><span class="line"><span class="keyword">const</span> total = orders.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> withTax = orders.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter</span></span><br><span class="line"><span class="keyword">const</span> highValue = orders.filter(<span class="function"><span class="params">v</span> =&gt;</span> v &gt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Every</span></span><br><span class="line"><span class="comment"> * @returns false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> everyValueGreaterThan50 = orders.every(<span class="function"><span class="params">v</span> =&gt;</span> v &gt; <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Every</span></span><br><span class="line"><span class="comment"> * @returns true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> everyValueGreaterThan10 = orders.every(<span class="function"><span class="params">v</span> =&gt;</span> v &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Some</span></span><br><span class="line"><span class="comment"> * @returns false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> someValueGreaterThan500 = orders.some(<span class="function"><span class="params">v</span> =&gt;</span> v &gt; <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Some</span></span><br><span class="line"><span class="comment"> * @returns true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> someValueGreaterThan10 = orders.some(<span class="function"><span class="params">v</span> =&gt;</span> v &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="async-await"><a class="markdownIt-Anchor" href="#async-await"></a> async-await</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> random = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">'Bad Promise Code 💩'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> first;</span><br><span class="line">    <span class="keyword">let</span> second;</span><br><span class="line">    <span class="keyword">let</span> third;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> random()</span><br><span class="line">        .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            first = v;</span><br><span class="line">            <span class="keyword">return</span> random();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            second = v;</span><br><span class="line">            <span class="keyword">return</span> random();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            third = v;</span><br><span class="line">            <span class="keyword">return</span> first + second + third;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Result <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'Good Promise Code ✅'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumRandomAsyncNums = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> first = <span class="keyword">await</span> random();</span><br><span class="line">    <span class="keyword">const</span> second = <span class="keyword">await</span> random();</span><br><span class="line">    <span class="keyword">const</span> third = <span class="keyword">await</span> random();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Result <span class="subst">$&#123;first + second + third&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> random()) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> randos = <span class="built_in">Promise</span>.all([</span><br><span class="line">        random(), </span><br><span class="line">        random(),</span><br><span class="line">        random()</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> r of <span class="keyword">await</span> randos) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumRandomAsyncNums();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何优雅地写代码，增加代码的可阅读性。JavaScript Pro Tips！&lt;/p&gt;
&lt;h3 id=&quot;how-to-use-consolelog&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-to-use-consolelog&quot;&gt;&lt;/a&gt; how to use console.log&lt;/h3&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://qingshaoxi.github.io/blog/tags/javascript/"/>
    
      <category term="es6" scheme="https://qingshaoxi.github.io/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>angular6懒加载组件</title>
    <link href="https://qingshaoxi.github.io/blog/post/lazy-load-angular-components.html"/>
    <id>https://qingshaoxi.github.io/blog/post/lazy-load-angular-components.html</id>
    <published>2018-09-15T12:11:03.000Z</published>
    <updated>2019-02-27T07:32:29.941Z</updated>
    
    <content type="html"><![CDATA[<p>延迟加载是Angular中的一种技术，它允许您在激活特定路由时异步加载JavaScript组件。这可以在初始加载期间添加一些初始性能，特别是如果您有许多具有复杂路由的组件。</p><h3 id="创建并初始化路由文件的app"><a class="markdownIt-Anchor" href="#创建并初始化路由文件的app"></a> 创建并初始化路由文件的app</h3><p>我们的app将默认加载<code>AppComponent</code>，然后当用户导航到时<code>lazy/load-me</code>，将以异步方式加载lazy模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new lazyDemo --routing</span><br></pre></td></tr></table></figure><p>在app组件中添加链接到lazy模块的链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">routerLink</span>=<span class="string">"/lazy/load-me"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初始化lazy模块"><a class="markdownIt-Anchor" href="#初始化lazy模块"></a> 初始化lazy模块</h3><p>创建一个延迟加载的模块，以及几个组件。<code>--flat</code>参数阻止创建目录，然后我们可以通过Angular CLI将组件添加到模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng g module lazy --flat</span><br><span class="line">ng g component lazy-parent --module lazy</span><br><span class="line">ng g component lazy-child --module lazy</span><br></pre></td></tr></table></figure><p>在<code>lazy module</code>中需要引入<code>RouterModule</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LazyParentComponent &#125; <span class="keyword">from</span> <span class="string">'./lazy-parent/lazy-parent.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LazyChildComponent &#125; <span class="keyword">from</span> <span class="string">'./lazy-child/lazy-child.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">    &#123; path: <span class="string">'load-me'</span>, component: LazyParentComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    RouterModule.forChild(routes)</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    LazyParentComponent,</span><br><span class="line">    LazyChildComponent</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LazyModule &#123; &#125;</span><br></pre></td></tr></table></figure><p><code>LazyParentComponent</code>组件的<code>lazy-parent.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let name of ['Foo', 'Bar', 'Baz']"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, my name is &#123;&#123;name&#125;&#125;. I'm a lazy child component.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-lazy-child</span>&gt;</span><span class="tag">&lt;/<span class="name">app-lazy-child</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将app-router指向lazy-module"><a class="markdownIt-Anchor" href="#将app-router指向lazy-module"></a> 将<code>App Router</code>指向<code>Lazy Module</code></h3><p>最后是将懒惰路由指向应用路由器的延迟模块。我们可以使用loadChildren带有模块文件路径的属性来执行此操作，然后使用＃引用模块本身。这告诉angular只有在<code>lazy url</code>激活时时加载<code>LazyModule</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">    &#123; path: <span class="string">'lazy'</span>, loadChildren: <span class="string">'./lazy.module#LazyModule'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="验证延迟加载是否正常工作"><a class="markdownIt-Anchor" href="#验证延迟加载是否正常工作"></a> 验证延迟加载是否正常工作</h3><p>在chrome中，打开开发人员工具，然后单击网络选项卡。当您导航到惰性URL时，可以看到<code>lazy-module.js</code>。加载需要<code>2ms</code>。</p><p><img src="https://github.com/whyour/graph-bed/raw/master/image.png" alt="lazy-load"></p><p><a href="https://github.com/whyour/lazy-angular-components" target="_blank" rel="noopener">github源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;延迟加载是Angular中的一种技术，它允许您在激活特定路由时异步加载JavaScript组件。这可以在初始加载期间添加一些初始性能，特别是如果您有许多具有复杂路由的组件。&lt;/p&gt;
&lt;h3 id=&quot;创建并初始化路由文件的app&quot;&gt;&lt;a class=&quot;markdownIt-A
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="route" scheme="https://qingshaoxi.github.io/blog/tags/route/"/>
    
      <category term="components" scheme="https://qingshaoxi.github.io/blog/tags/components/"/>
    
      <category term="lazy-load" scheme="https://qingshaoxi.github.io/blog/tags/lazy-load/"/>
    
  </entry>
  
  <entry>
    <title>angular6路由基础</title>
    <link href="https://qingshaoxi.github.io/blog/post/angular-router.html"/>
    <id>https://qingshaoxi.github.io/blog/post/angular-router.html</id>
    <published>2018-09-09T13:10:47.000Z</published>
    <updated>2019-02-27T07:32:29.916Z</updated>
    
    <content type="html"><![CDATA[<p>路由对大多数Angular应用来说是关键的用户体验因素，路由配置对页面加载性能，搜索引擎优化，安全性和用户体验有重大影响。</p><h3 id="通过cli工具创建一个angular应用"><a class="markdownIt-Anchor" href="#通过cli工具创建一个angular应用"></a> 通过cli工具创建一个angular应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new awesome-app --routing</span><br></pre></td></tr></table></figure><h3 id="创建路由和导航"><a class="markdownIt-Anchor" href="#创建路由和导航"></a> 创建路由和导航</h3><p>路由将在<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>所在父组件中呈现组件，默认情况下是<code>app.component</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HomeComponent &#125; <span class="keyword">from</span> <span class="string">'./home/home.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'home'</span>, component: HomeComponent &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在HTML中设置指向此路径的链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/home"</span>&gt;</span>Home Page!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者，可以使用导航实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  goHome() &#123;</span><br><span class="line">    <span class="keyword">this</span>.router.navigate([<span class="string">'home'</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带参数的子路由"><a class="markdownIt-Anchor" href="#带参数的子路由"></a> 带参数的子路由</h3><p>假设我们有一个动物列表，并希望在导航时呈现有关特定动物的一些细节<code>/animals/elephant</code>。但是我们的数据库有成千上万的动物，所以我们需要动态创建这个路由。添加<code>:</code>到路径上使其成为动态值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'animals'</span>,</span><br><span class="line">    component: ParentComponent,</span><br><span class="line">    children: [</span><br><span class="line">        &#123; path: <span class="string">':name'</span>, component: ChildComponent &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这时候，我们可以<code>/animals/elephant</code>URL片段中得到动物的<code>name</code>或者<code>id</code>。<br>在父组件中，我们将从数据库循环我们的<code>animal</code>对象，并根据动物名称创建路由url。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let animal of animals$ | async"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/animals', animal.name]"</span>&gt;</span>&#123;&#123; animal.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件将在父组件的<code>outlet</code>内渲染。</p><h3 id="泛组件404页面"><a class="markdownIt-Anchor" href="#泛组件404页面"></a> 泛组件404页面</h3><p>我们可以将<code>**</code>路径用于捕获路由，以便优雅地处理不存在的数据。但是要确保这是<code>routes</code>数组中的最后一个路由。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [&#123; path: <span class="string">'**'</span>, component: ErrorComponent &#125;];</span><br></pre></td></tr></table></figure><h3 id="redirect路由"><a class="markdownIt-Anchor" href="#redirect路由"></a> redirect路由</h3><p>你可以redirect到一个已经存在的路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'animales'</span>, redirectTo: <span class="string">'animals'</span>, pathMatch: <span class="string">'full'</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="修改active-route的css"><a class="markdownIt-Anchor" href="#修改active-route的css"></a> 修改<code>active route</code>的css</h3><p>Angular可以轻松地将修改<code>active route</code>CSS样式。路由有一个特殊的属性绑定<code>routerLinkActive</code>，它将应用右侧提供的指定CSS类。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLinkActive</span>=<span class="string">"highlight"</span>&gt;</span>Some Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#23d160</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a class="markdownIt-Anchor" href="#路由守卫"></a> 路由守卫</h3><p>路由守卫是一中可注入的angular服务，angular提供5中路由</p><ul><li>canActivate - 根据条件阻止路由，通常是用户的身份验证状态。</li><li>canDeactivate - 强制用户留在路线上，通常使用防止丢失表单上未保存的更改。</li><li>resolve - 预加载可从路径访问的其他数据。</li><li>canActivateChild - 处理导航到子路由的情况。</li><li>canLoad - 处理异步导航到某特性模块的情况。</li></ul><h3 id="canactivate-示例"><a class="markdownIt-Anchor" href="#canactivate-示例"></a> CanActivate 示例</h3><p>我们使用1s的计时器模拟异步调用，以验证用户是否为管理员。<code>canActivate</code>守卫会自动订阅并用收到的布尔值拒绝或者允许访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AdminGuard <span class="keyword">implements</span> CanActivate &#123;</span><br><span class="line">  canActivate(</span><br><span class="line">    next: ActivatedRouteSnapshot,</span><br><span class="line">    state: RouterStateSnapshot</span><br><span class="line">  ): Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> timer(<span class="number">1000</span>).pipe(</span><br><span class="line">      map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="literal">false</span>),</span><br><span class="line">      tap(<span class="function"><span class="params">v</span> =&gt;</span> alert(<span class="string">'Only ADMINS allowed here!'</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，应用守卫到路由上。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">'secret'</span>, component: SecretComponent, canActivate: [AdminGuard] &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="预加载数据的路由示例"><a class="markdownIt-Anchor" href="#预加载数据的路由示例"></a> 预加载数据的路由示例</h3><p>保持代码<code>DRY(Don't Repeat Yourself)</code>最有效的机制之一就是使用<code>resolve</code>预加载数据，如果需要在多个路由上查询相同的数据，<code>resolver</code>就可以显著的简化代码，下面的代码先从<code>route</code>中提取数据，然后返回一个异步获取数据的<code>Observable</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Preloader <span class="keyword">implements</span> Resolve&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  resolve(</span><br><span class="line">    next: ActivatedRouteSnapshot,</span><br><span class="line">    state: RouterStateSnapshot</span><br><span class="line">  ): Observable&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = next.paramMap.get(<span class="string">'id'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observable(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">      observer.next(animal);</span><br><span class="line">      observer.complete();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化组件时，使用上面的<code>resolver</code>的路由都可以访问它的数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'settings/:id'</span>,</span><br><span class="line">    component: SettingsComponent,</span><br><span class="line">    resolve: [PreloadData]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'playground/:id'</span>,</span><br><span class="line">    component: PlaygroundComponent,</span><br><span class="line">    resolve: [PreloadData]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后，您可以从组件中以<code>Observable</code>的形式访问数据。比在多个组件中重复相同的数据获取代码要简洁得多。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SettingsComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> route: ActivatedRoute</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.data$ = <span class="keyword">this</span>.route.data.pipe(</span><br><span class="line">      map(<span class="function"><span class="params">val</span> =&gt;</span> val[<span class="number">0</span>])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/whyour/angular-route-demo.git" target="_blank" rel="noopener">github源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;路由对大多数Angular应用来说是关键的用户体验因素，路由配置对页面加载性能，搜索引擎优化，安全性和用户体验有重大影响。&lt;/p&gt;
&lt;h3 id=&quot;通过cli工具创建一个angular应用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#通过cli
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="router" scheme="https://qingshaoxi.github.io/blog/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>webhook实现服务器自动部署</title>
    <link href="https://qingshaoxi.github.io/blog/post/webhook-js.html"/>
    <id>https://qingshaoxi.github.io/blog/post/webhook-js.html</id>
    <published>2018-09-01T13:25:56.000Z</published>
    <updated>2019-02-27T07:32:29.962Z</updated>
    
    <content type="html"><![CDATA[<p><code>Webhook</code>是一种通过自定义回调函数来增加或更改網頁表现的方法。这些回调可被可能与原始网站或应用相关的第三方用户及开发者保存、修改与管理。术语“网络钩子”由杰夫·林德塞（Jeff Lindsay）于2007年通过给计算机编程术语“钩子”（Hook）加上前缀得。<br>网络钩子是“用户定义的HTTP回调”。网络钩子通常被某些事件激活，比如将代码推送到源[3]或评论博客。.[4]当此事件发生时，原网站将向为网络钩子配置的URL发送HTTP请求。用户可配置它们引发网页上的事件以调用另一个网站的行为。此操作可为任何事件。<br>本片博客介绍一个简单的<code>github</code>中的<code>webhook</code>自动部署<code>hexo</code>博客。</p><h3 id="服务器安装依赖githexonodenpm"><a class="markdownIt-Anchor" href="#服务器安装依赖githexonodenpm"></a> 服务器安装依赖git，hexo，node，npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br><span class="line">apt install nodejs</span><br><span class="line">apt install npm</span><br><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure><h3 id="创建blog文件夹clone仓库代码"><a class="markdownIt-Anchor" href="#创建blog文件夹clone仓库代码"></a> 创建blog文件夹，clone仓库代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:whyour/blog.git</span><br></pre></td></tr></table></figure><p>若没有使用公钥，可使用https地址克隆，或者创建秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh &amp;&amp; ssh-keygen</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制公钥到github的sshkeys中，即可进行ssh克隆</p><h3 id="创建一个webhookjs"><a class="markdownIt-Anchor" href="#创建一个webhookjs"></a> 创建一个webhook.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi webhook.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url === <span class="string">'/webhooks/push/1'</span>) &#123; <span class="comment">//定义webhook地址</span></span><br><span class="line">        exec(<span class="string">'sh ./webhook.sh'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.end();</span><br><span class="line">&#125;).listen(<span class="number">9999</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'we are in 9999'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建webhooksh脚本执行pull编译等操作"><a class="markdownIt-Anchor" href="#创建webhooksh脚本执行pull编译等操作"></a> 创建webhook.sh脚本，执行pull，编译等操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi webhook.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'begin'</span> &gt; ../1.txt</span><br><span class="line"><span class="built_in">cd</span> /usr/share/nginx/blog</span><br><span class="line">git pull</span><br><span class="line">npm run hook</span><br><span class="line">cp -r /usr/share/nginx/blog/public/* /usr/share/nginx/ninesix.cc/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'end'</span> &gt;&gt; ../1.txt</span><br></pre></td></tr></table></figure><h3 id="使用pm2启动webhook服务"><a class="markdownIt-Anchor" href="#使用pm2启动webhook服务"></a> 使用pm2启动webhook服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pm2</span><br><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure><h3 id="把webhook地址写到github的项目设置中"><a class="markdownIt-Anchor" href="#把webhook地址写到github的项目设置中"></a> 把webhook地址写到github的项目设置中</h3><p><code>http://ip:9999/webhooks/push/1</code></p><p>github会测试发送，成功之后会显示绿色对勾</p><p><img src="/postImg/webhook.jpg" alt="webhook"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Webhook&lt;/code&gt;是一种通过自定义回调函数来增加或更改網頁表现的方法。这些回调可被可能与原始网站或应用相关的第三方用户及开发者保存、修改与管理。术语“网络钩子”由杰夫·林德塞（Jeff Lindsay）于2007年通过给计算机编程术语“钩子”（Hook
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://qingshaoxi.github.io/blog/tags/nodejs/"/>
    
      <category term="javascript" scheme="https://qingshaoxi.github.io/blog/tags/javascript/"/>
    
      <category term="webhook" scheme="https://qingshaoxi.github.io/blog/tags/webhook/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的es6与简写技巧</title>
    <link href="https://qingshaoxi.github.io/blog/post/js-shorthand.html"/>
    <id>https://qingshaoxi.github.io/blog/post/js-shorthand.html</id>
    <published>2018-08-23T07:18:27.000Z</published>
    <updated>2019-02-27T07:32:29.938Z</updated>
    
    <content type="html"><![CDATA[<p>那些更简洁，更优雅的代码</p><h3 id="三目运算符"><a class="markdownIt-Anchor" href="#三目运算符"></a> 三目运算符</h3><p>下面是一个很好的例子，将一个完整的 if 语句，简写为一行代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    result = <span class="string">'greater than 10'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">'less than 10'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写为：</p><blockquote><p>const result = a &gt; 10 ? ‘greater than 10’ : ‘less than 10’;</p></blockquote><h3 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h3><p>当使用纯 JavaScript（不依赖外部库，如 jQuery 或 lodash）时，下面的简写会非常有用。</p><blockquote><p>for (let i = 0; i &lt; list.length; i++)</p></blockquote><p>简写为：</p><blockquote><p>for (let index of list)</p></blockquote><h3 id="声明变量"><a class="markdownIt-Anchor" href="#声明变量"></a> 声明变量</h3><p>在函数开始之前，对变量进行赋值是一种很好的习惯。在申明多个变量时：</p><p><code>let x;let y;let z = 3;</code></p><p>可以简写为：</p><blockquote><p>let x, y, z=3;</p></blockquote><h3 id="if-语句"><a class="markdownIt-Anchor" href="#if-语句"></a> if 语句</h3><p>在使用 if 进行基本判断时，可以省略赋值运算符。</p><blockquote><p><code>if (likeJavaScript === true)</code></p></blockquote><p>简写为：</p><blockquote><p><code>if (likeJavaScript)</code></p></blockquote><h3 id="十进制数"><a class="markdownIt-Anchor" href="#十进制数"></a> 十进制数</h3><p>可以使用科学计数法来代替较大的数据，如可以将 10000000 简写为 1e7。</p><blockquote><p><code>for (let i = 0; i &lt; 10000; i++) { }</code></p></blockquote><p>简写为：</p><blockquote><p><code>for (let i = 0; i &lt; 1e7; i++) { }</code></p></blockquote><h3 id="多行字符串"><a class="markdownIt-Anchor" href="#多行字符串"></a> 多行字符串</h3><p>如果需要在代码中编写多行字符串，就像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> html = <span class="string">'&lt;li class="comment-item" data-id="'</span> + post.id + <span class="string">'" data-name="'</span>+ post.name + <span class="string">'" id="comment-'</span> + post.id + <span class="string">'"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;div class="comment-item-body"&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;a class="comment-item-avatar" href="#comment-'</span>+post.id+<span class="string">'"&gt;&lt;img src="'</span> + post.avatar + <span class="string">'"&gt;&lt;/a&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;div class="comment-item-main"&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;div class="comment-item-header"&gt;&lt;a class="comment-item-name" title="'</span> + post.name + <span class="string">'" rel="nofollow" target="_blank" href="'</span> + ( post.url ? post.url : <span class="string">'javascript:;'</span> ) + <span class="string">'"&gt;'</span> + post.name + <span class="string">'&lt;/a&gt;'</span>+ (post.isMod ?<span class="string">'&lt;span class="comment-item-badge"&gt;'</span>+_.opts.badge+<span class="string">'&lt;/span&gt;'</span> :<span class="string">''</span>)+parentPost.name+<span class="string">'&lt;span class="comment-item-bullet"&gt; • &lt;/span&gt;&lt;time class="comment-item-time" datetime="'</span> + post.createdAt + <span class="string">'"&gt;&lt;/time&gt;&lt;/div&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;div class="comment-item-content"&gt;'</span> + post.message + mediaHTML + <span class="string">'&lt;/div&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;div class="comment-item-footer"&gt;'</span> + (!!post.isPost ? <span class="string">'&lt;span class="comment-item-manage"&gt;&lt;a class="comment-item-edit" href="javascript:;"&gt;编辑&lt;/a&gt;&lt;span class="comment-item-bullet"&gt; • &lt;/span&gt;&lt;a class="comment-item-delete" href="javascript:;"&gt;删除&lt;/a&gt;&lt;span class="comment-item-bullet"&gt; • &lt;/span&gt;&lt;/span&gt;'</span> : <span class="string">''</span>) + <span class="string">'&lt;a class="comment-item-reply" href="javascript:;"&gt;回复&lt;/a&gt; &lt;/div&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;/div&gt;&lt;/div&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;ul class="comment-item-children"&gt;&lt;/ul&gt;'</span>+</span><br><span class="line">            <span class="string">'&lt;/li&gt;'</span>;</span><br></pre></td></tr></table></figure><p>但是还有一个更简单的方法，反引号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&lt;li class="discovery-post"&gt;</span></span><br><span class="line"><span class="string">    &lt;a class="publisher-anchor-color" href="" target="" rel=""&gt;</span></span><br><span class="line"><span class="string">        &lt;header class="discovery-post-header"&gt;</span></span><br><span class="line"><span class="string">            &lt;h3 title="<span class="subst">$&#123;item.title&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">                &lt;span data-role="discovery-thread-title" class="title line-truncate" data-line-truncate="2"&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;ul class="meta"&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="comments"&gt;<span class="subst">$&#123;item.posts&#125;</span>条评论 &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="time"&gt;</span></span><br><span class="line"><span class="string">                    &lt;time class="comment-item-time" datetime="<span class="subst">$&#123;item.createdAt&#125;</span>"&gt;&lt;/time&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/header&gt;</span></span><br><span class="line"><span class="string">        &lt;a class="top-comment" data-role="discovery-top-comment" href="" target="" rel=""&gt;</span></span><br><span class="line"><span class="string">            &lt;img alt="头像" data-role="discovery-avatar" src="<span class="subst">$&#123;item.author.avatar.cache&#125;</span>"&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;</span></span><br><span class="line"><span class="string">                &lt;span class="user" data-role="discovery-top-comment-author"&gt;<span class="subst">$&#123;item.author.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                —</span></span><br><span class="line"><span class="string">                &lt;span data-role="discovery-top-comment-snippet" class="line-truncate" data-line-truncate="3"&gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">$&#123;item.message&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/a&gt; </span></span><br><span class="line"><span class="string">    &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="变量赋值"><a class="markdownIt-Anchor" href="#变量赋值"></a> 变量赋值</h3><p>当将一个变量的值赋给另一个变量时，首先需要确保原值不是 null、未定义的或空值。</p><p>可以通过编写一个包含多个条件的判断语句来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (v1 !== <span class="literal">null</span> || v1 !== <span class="literal">undefined</span> || v1 !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> v2 = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者简写为以下的形式：</p><blockquote><p><code>const v2 = v1 || 'other';</code></p></blockquote><h3 id="默认值赋值"><a class="markdownIt-Anchor" href="#默认值赋值"></a> 默认值赋值</h3><p>如果预期参数是 null 或未定义，则不需要写六行代码来分配默认值。我们可以只使用一个简短的逻辑运算符，只用一行代码就能完成相同的操作，同变量赋值。</p><p>简写为：</p><blockquote><p><code>const dbHost = process.env.HOST || 'localhost';</code></p></blockquote><h3 id="对象属性"><a class="markdownIt-Anchor" href="#对象属性"></a> 对象属性</h3><p>ES6 提供了一个很简单的办法，来分配属性的对象。如果属性名与 key 名相同，则可以使用简写。</p><blockquote><p><code>const obj = { x:x, y:y };</code></p></blockquote><p>简写为：</p><blockquote><p><code>const obj = { x, y };</code></p></blockquote><h3 id="箭头函数"><a class="markdownIt-Anchor" href="#箭头函数"></a> 箭头函数</h3><p>经典函数很容易读写，但是如果把它们嵌套在其它函数中进行调用时，整个函数就会变得有些冗长和混乱。这时候可以使用箭头函数来简写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'yes'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>简写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'yes'</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="隐式返回值"><a class="markdownIt-Anchor" href="#隐式返回值"></a> 隐式返回值</h3><p>返回值是我们通常用来返回函数最终结果的关键字。只有一个语句的箭头函数，可以隐式返回结果（函数必须省略括号（{ }），以便省略返回关键字）。</p><p>要返回多行语句（例如对象文本），需要使用（）而不是{ }来包裹函数体。这样可以确保代码以单个语句的形式进行求值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="function"><span class="params">a</span> =&gt;</span> a*a;</span><br></pre></td></tr></table></figure><h3 id="默认参数值"><a class="markdownIt-Anchor" href="#默认参数值"></a> 默认参数值</h3><p>可以使用 if 语句来定义函数参数的默认值。ES6 中规定了可以在函数声明中定义默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w ,h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        w = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (h === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        h = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">1</span>, h = <span class="number">2</span></span>) =&gt;</span> l * w * h;</span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a class="markdownIt-Anchor" href="#解构赋值"></a> 解构赋值</h3><h4 id="交换变量的值"><a class="markdownIt-Anchor" href="#交换变量的值"></a> 交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h4 id="函数返回多个值"><a class="markdownIt-Anchor" href="#函数返回多个值"></a> 函数返回多个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure><h4 id="函数参数的定义"><a class="markdownIt-Anchor" href="#函数参数的定义"></a> 函数参数的定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="提取json数据"><a class="markdownIt-Anchor" href="#提取json数据"></a> 提取json数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  id: <span class="number">42</span>,</span><br><span class="line">  status: <span class="string">"OK"</span>,</span><br><span class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></table></figure><h4 id="函数参数的默认值"><a class="markdownIt-Anchor" href="#函数参数的默认值"></a> 函数参数的默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  async = true,</span></span></span><br><span class="line"><span class="function"><span class="params">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class="line">  cache = <span class="literal">true</span>,</span><br><span class="line">  complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  crossDomain = <span class="literal">false</span>,</span><br><span class="line">  global = <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ... more config</span></span><br><span class="line">&#125; = &#123;&#125;) &#123;</span><br><span class="line">  <span class="comment">// ... do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="遍历-map-结构"><a class="markdownIt-Anchor" href="#遍历-map-结构"></a> 遍历 Map 结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure><h4 id="加载模块指定方法"><a class="markdownIt-Anchor" href="#加载模块指定方法"></a> 加载模块指定方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Store, Action &#125; = <span class="built_in">require</span>(<span class="string">"ngx-tethys"</span>);</span><br></pre></td></tr></table></figure><h4 id="展开运算符"><a class="markdownIt-Anchor" href="#展开运算符"></a> 展开运算符</h4><p>展开运算符是在 ES6 中引入的，使用展开运算符能够让 JavaScript 代码更加有效和有趣。</p><p>使用展开运算符可以替换某些数组函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> even = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr = odd.concat(even);</span><br></pre></td></tr></table></figure><p>简写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, ...odd];</span><br></pre></td></tr></table></figure><p>和 concat( ) 功能不同的是，用户可以使用扩展运算符在任何一个数组中插入另一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">也可以将展开运算符和 ES6 解构符号结合使用：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="arrayfind"><a class="markdownIt-Anchor" href="#arrayfind"></a> Array.find</h3><p>如果你曾经编写过普通 JavaScript 中的 find 函数，那么你可能使用了 for 循环。在 ES6 中，介绍了一种名为 find（）的新数组函数，可以实现 for 循环的简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = [</span><br><span class="line">    &#123;<span class="attr">type</span>: <span class="string">'dog'</span>, <span class="attr">name</span>: <span class="string">'killer'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">type</span>: <span class="string">'cat'</span>, <span class="attr">name</span>: <span class="string">'hiller'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">type</span>: <span class="string">'pig'</span>, <span class="attr">name</span>: <span class="string">'miller'</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> pets) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pets[i].type === <span class="string">'dog'</span> &amp;&amp; pets[i].name === name) &#123;</span><br><span class="line">            <span class="keyword">return</span> pets[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type === <span class="string">'dog'</span> &amp;&amp; pet.name === <span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h3 id="object-key"><a class="markdownIt-Anchor" href="#object-key"></a> Object [key]</h3><p>虽然将 foo.bar 写成 foo [‘bar’] 是一种常见的做法，但是这种做法构成了编写可重用代码的基础。</p><blockquote><p>key可接受一个变量;</p></blockquote><h3 id="双位操作符"><a class="markdownIt-Anchor" href="#双位操作符"></a> 双位操作符</h3><p>位操作符是 JavaScript 初级教程的基本知识点，但是我们却不常使用位操作符。因为在不处理二进制的情况下，没有人愿意使用 1 和 0。</p><p>但是双位操作符却有一个很实用的案例。你可以使用双位操作符来替代 Math.floor( )。双否定位操作符的优势在于它执行相同的操作运行速度更快。</p><blockquote><p><code>Math.floor(4.9) === 4 //true</code></p></blockquote><p>简写为：</p><blockquote><p><code>~~4.9 === 4 //true</code></p></blockquote><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> <strong>总结</strong></h3><p>上述是一些常用的 JavaScript 简写技巧，如果有其它未提及的简写技巧，也欢迎大家补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;那些更简洁，更优雅的代码&lt;/p&gt;
&lt;h3 id=&quot;三目运算符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#三目运算符&quot;&gt;&lt;/a&gt; 三目运算符&lt;/h3&gt;
&lt;p&gt;下面是一个很好的例子，将一个完整的 if 语句，简写为一行代码。&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://qingshaoxi.github.io/blog/tags/javascript/"/>
    
      <category term="es6" scheme="https://qingshaoxi.github.io/blog/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>使用Guard和Resolve进行验证和权限控制</title>
    <link href="https://qingshaoxi.github.io/blog/post/angular-router-guard.html"/>
    <id>https://qingshaoxi.github.io/blog/post/angular-router-guard.html</id>
    <published>2018-07-29T15:23:35.000Z</published>
    <updated>2019-02-27T07:32:29.915Z</updated>
    
    <content type="html"><![CDATA[<p>Angular2提供了2种组件，<code>Guard</code>和<code>Resolve</code>。<code>Guard</code>顾名思义就是用来保护一个路径。可以用来判断用户只有在满足一定的条件的情况下才能打开这个路径对应的页面。<code>Resolve</code>用来在进入某个路径之前先获取数据。</p><h2 id="guard"><a class="markdownIt-Anchor" href="#guard"></a> Guard</h2><p><code>Guard</code>其实是一系列接口，只要你实现了它的方法，配置了这些<code>Guard</code>，Angular路由框架就会根据这个方法返回的<code>true</code>或<code>false</code>来判断是否激活这个路由。它包括几种类型：</p><ul><li>CanActivate<br>这种类型的<code>Guard</code>用来控制是否允许进入当前的路径。</li><li>CanActivateChild<br>这种类型的<code>Guard</code>用来控制是否允许进入当前路径的所有子路径。</li><li>CanDeactivate<br>用来控制是否能离开当前页面进入别的路径</li><li>CanLoad<br>用于控制一个异步加载的子模块是否允许被加载。</li></ul><p>以<code>CanActivate</code>为例，这个接口的定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> CanActivate &#123;</span><br><span class="line"></span><br><span class="line">    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable&lt;<span class="built_in">boolean</span>&gt; | <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口定义了一个方法，当你实现这个接口，并把它配置到某一个路由上以后，当用户进入这个路由的路径之前，就会调用它里面的<code>canActivate()</code>方法，它第一个参数，就是将要激活的路由，第二个参数是路由器当前的状态。它返回一个布尔型的结果，或者是布尔型的<code>Promise</code>或<code>Observable</code>。</p><h2 id="resolve"><a class="markdownIt-Anchor" href="#resolve"></a> Resolve</h2><p>这跟Angular1中ui-router库的<code>resolve</code>类似，就是用来在打开一个页面之前先获取数据，而不是进入页面以后再加载。这个接口中的方法，可以返回任意的对象，也可以返回一个<code>Promise</code>，或者<code>Observable</code></p><p>如果在一个路径上同时设置了<code>CanActivate</code>和<code>Resolve</code>，首先<code>CanActivate</code>接口的方法会被执行，当这个路由可以被激活时，<code>Resolve</code>接口的方法才会被执行。</p><h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2><p>下面，我们来通过一个比较完整的实例，来看看，<code>CanActivate</code>，<code>CanActivateChild</code>，<code>CanDeactivate</code>和<code>Resolve</code>的用法。</p><h3 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景</h3><p>我们先来看一看要解决的一些问题：</p><ol><li>系统的默认页是home页面，这个页面不需要登录也可以打开。</li><li>登陆以后，管理员和用户分别进入不同的页面。</li><li>所有的todo模块的页面都需要用户角色，管理页面需要管理员角色</li><li>在进入任务列表页面之前，需要获取任务列表数据，而不是进入页面以后再获取数据。</li><li>当用户离开任务详情页时，提示是否确认要离开。</li></ol><h3 id="默认页面home"><a class="markdownIt-Anchor" href="#默认页面home"></a> 默认页面home</h3><p>默认页面就是当用户直接打开你的网页域名，没有输入任何路径的情况下，默认打开的页面，在之前的教程已经讲过，这是在配置路由的时候，用<code>redirect</code>实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">    redirectTo: <span class="string">'/home'</span>,</span><br><span class="line"></span><br><span class="line">    pathMatch: <span class="string">'full'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="authservice"><a class="markdownIt-Anchor" href="#authservice"></a> AuthService</h3><p>首先我们需要一个权限验证的服务<code>AuthService</code>，除了用来进行登陆操作，还用于验证是否登陆，是否具有拥有某种角色。具体代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthService &#123;</span><br><span class="line"></span><br><span class="line">    account: Account;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// simulation to login.</span></span><br><span class="line"></span><br><span class="line">    login(role: <span class="built_in">string</span>): Observable&lt;Account&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line">        account.id = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        account.name = <span class="string">'super man'</span>;</span><br><span class="line"></span><br><span class="line">        account.roles = [role];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Observable.of(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getAccount(): Account &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.account;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isLogdedin(): <span class="built_in">boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.account &amp;&amp; <span class="keyword">this</span>.account.id != <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hasRole(role: <span class="built_in">string</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.account &amp;&amp; <span class="keyword">this</span>.account.roles.includes(role);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最上面我们注意到我们引入了<code>Observable</code>和它的一个方法<code>of</code>。这是由于我们的登陆操作一般都是去服务器端进行登陆验证，而使用<code>Http</code>服务从服务器端获取数据一般都是返回<code>Observable</code>，所以这里也使用<code>Observable</code>来返回登陆后的用户信息。我们引入<code>of</code>方法，是因为我们对<code>Observable</code>的操作都是需要什么操作符就引入什么，而不是直接引入所有的。<br>最后的<code>hasRole(role)</code>方法的用途是，我们可以在页面上通过<code>ngIf=&quot;hasRole('CUSTOMER')&quot;</code>的方式来控制是否显示某个页面元素。</p><h3 id="路由定义"><a class="markdownIt-Anchor" href="#路由定义"></a> 路由定义</h3><p>之前todo模块的路由是这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoRoutes: Route[] = [</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        path: <span class="string">'todo'</span>,</span><br><span class="line"></span><br><span class="line">        children: [</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'list'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoListComponent</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'detail/:id'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoDetailComponent</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在路径<code>todo</code>下面，有两个子路由，分别是列表和详情。<br>然后再针对下面的需求，一个个来解决：</p><ol><li>所有的todo模块的页面都需要用户角色</li><li>离开详情页需要确认</li><li>进入列表页面之前需要先获取任务列表数据</li></ol><h3 id="控制所有todo模块的都需要用户角色"><a class="markdownIt-Anchor" href="#控制所有todo模块的都需要用户角色"></a> 控制所有todo模块的都需要用户角色</h3><p>对于第一个，我们要保护所有的todo模块的页面，也就是’/todo’路径的所有子路径，所以，我们可以使用<code>CanActivateChild</code>。这样，在每进入一个todo的子路径的时候，都会先进行检查来判断能否进入。代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CanActivateChild, Router,</span><br><span class="line"></span><br><span class="line">    ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'../services/auth.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; TodoDetailComponent &#125; <span class="keyword">from</span> <span class="string">'./detail/detail.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyTodoGuard <span class="keyword">implements</span> CanActivateChild &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService, <span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.authService.isLogdedin()) &#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">'You need to login!'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">'/home'</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.authService.hasRole(<span class="string">'CUSTOMER'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>Guard</code>的实现很简单，就是用<code>authService</code>来判断是否登陆，以及是否具有’CUSTOMER’角色。<br>注意这个<code>Guard</code>的实现也必须是<code>Injectable</code>的，因为我们需要Angular的依赖注入帮我们创建实例和自动注入。</p><h3 id="离开详情页需要确认"><a class="markdownIt-Anchor" href="#离开详情页需要确认"></a> 离开详情页需要确认</h3><p>接下来我们看怎么实现离开详情页时的确认，也很简单，就是使用<code>CanDeactivate</code>，并把它定义在详情页的路由定义上。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CanLeaveTodoDetailGuard <span class="keyword">implements</span> CanDeactivate&lt;TodoDetailComponent\&gt; &#123;</span><br><span class="line"></span><br><span class="line">    canDeactivate(component: TodoDetailComponent, route: ActivatedRouteSnapshot, state: RouterStateSnapshot) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> confirm(<span class="string">'Confirm?'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简单，上面的方法直接调用<code>confirm('confirm?')</code>并返回它的结果，它会返回一个布尔型的结果，表示用户是否确认。如果用户取消了，就不会离开详情页。</p><h3 id="进入列表页面之前需要先获取数据"><a class="markdownIt-Anchor" href="#进入列表页面之前需要先获取数据"></a> 进入列表页面之前需要先获取数据</h3><p>最后，再看看用<code>Resolve</code>来实现进入一个页面之前的数据初始化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Resolve, ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Todo &#125; <span class="keyword">from</span> <span class="string">'./todo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; TodoService &#125; <span class="keyword">from</span> <span class="string">'./todo.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyTodoResolver <span class="keyword">implements</span> Resolve&lt;Todo\&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> todoService: TodoService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Get my todo list.'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todoService.getAllTodos();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个<code>resolve()</code>方法中，直接返回调用<code>todoService</code>的<code>getAllTodos()</code>方法的结果。对这个<code>getAllTodos()</code>方法我们做一些修改，让他返回一些测试数据：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/delay'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 神略中间的部分</span></span><br><span class="line"></span><br><span class="line">  getAllTodos(): Observable&lt;Todo[]&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> todo1 = <span class="keyword">new</span> Todo();</span><br><span class="line"></span><br><span class="line">    todo1.id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    todo1.title = <span class="string">'test task 1'</span>;</span><br><span class="line"></span><br><span class="line">    todo1.createdDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    todo1.complete = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> todo2 = <span class="keyword">new</span> Todo();</span><br><span class="line"></span><br><span class="line">    todo2.id = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    todo2.title = <span class="string">'test task 2'</span>;</span><br><span class="line"></span><br><span class="line">    todo2.createdDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    todo2.complete = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.todos = [todo1, todo2];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Observable.of(<span class="keyword">this</span>.todos).delay(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这个方法里我们创建了2个测试的任务，封装成<code>Observable</code>返回，并添加了一个3秒钟的延时，来模拟从服务器端获取数据的过程。<br>通过<code>Resolve</code>方式获取的数据，会放在被激活的当前路由的<code>data</code>属性里面，我们可以在组件中来获得。所以，需要修改<code>TodoListComponent</code>，从路由的数据<code>data</code>中获取<code>todos</code>的值。然后就可以在页面中显示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line"></span><br><span class="line">    newTodo: Todo = <span class="keyword">new</span> Todo();</span><br><span class="line"></span><br><span class="line">    todos: Todo[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> todoService: TodoService, <span class="keyword">private</span> route: ActivatedRoute</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.todos = <span class="keyword">this</span>.route.snapshot.data[<span class="string">'todos'</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终的todo模块路由配置"><a class="markdownIt-Anchor" href="#最终的todo模块路由配置"></a> 最终的todo模块路由配置</h3><p>最后我们再看看加上上面的<code>Guard</code>和<code>Resolve</code>的路由配置以后，todo模块的路由配置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoRoutes: Route[] = [</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        path: <span class="string">'todo'</span>,</span><br><span class="line"></span><br><span class="line">        canActivateChild: [MyTodoGuard],</span><br><span class="line"></span><br><span class="line">        children: [</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'list'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoListComponent,</span><br><span class="line"></span><br><span class="line">                resolve: &#123; todos: MyTodoResolver &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'detail/:id'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoDetailComponent,</span><br><span class="line"></span><br><span class="line">                canDeactivate: [ CanLeaveTodoDetailGuard ]</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们在’todo’的路由上加了一个<code>canActivateChild</code>控制能否激活子路径, 在<code>list</code>的子路径上配置了一个<code>resolve</code>来获取数据，在<code>detail/:id</code>上配置了一个<code>canDeactivate</code>来控制能否离开。</p><p>最后，别忘了我们还需要在<code>todo</code>模块的定义<code>TodoModule</code>里面的<code>providers</code>里添加这些，这样依赖注入功能才能使用这些服务。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line"></span><br><span class="line">  imports:      [CommonModule, FormsModule ],</span><br><span class="line"></span><br><span class="line">  declarations: [TodoListComponent, TodoDetailComponent, TodoItemComponent],</span><br><span class="line"></span><br><span class="line">  providers:    [TodoService, MyTodoResolver, MyTodoGuard, CanLeaveTodoDetailGuard]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoModule &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="通用的角色验证guard"><a class="markdownIt-Anchor" href="#通用的角色验证guard"></a> 通用的角色验证Guard</h3><hr><p>在上面的<code>MyTodoGuard</code>里面，我们判断当前的用户是否具有<code>CUSTOMER</code>角色，如果我们能够把这个需要判断的<code>CUSTOMER</code>角色通过一种方式来传递到这个方法里面，然后通过传递不同的参数，就可以用这个方法来判断进入任意页面的用户是否具有某个角色。我们可以使用Angular2路由里面的<code>data</code>属性来实现。<br>当我们定义一个路由时，可以通过<code>data</code>属性来给这个路由添加一些数据，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoRoutes: Route[] = [</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        path: <span class="string">'todo'</span>,</span><br><span class="line"></span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">            role: <span class="string">'CUSTOMER'</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        canActivateChild: [MyTodoGuard],</span><br><span class="line"></span><br><span class="line">        children: [</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'list'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoListComponent,</span><br><span class="line"></span><br><span class="line">                resolve: &#123;</span><br><span class="line"></span><br><span class="line">                    todos: MyTodoResolver</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                data: &#123;</span><br><span class="line"></span><br><span class="line">                    title: <span class="string">'列表'</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                path: <span class="string">'detail/:id'</span>,</span><br><span class="line"></span><br><span class="line">                component: TodoDetailComponent,</span><br><span class="line"></span><br><span class="line">                canDeactivate: [ CanLeaveTodoDetailGuard ],</span><br><span class="line"></span><br><span class="line">                data: &#123;</span><br><span class="line"></span><br><span class="line">                    title: <span class="string">'详情'</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>我们给’todo’这个路由添加了1个变量，角色，我们可以在这个路由定义的组件以及它所有的子组件中的当前路由中得到这些数据。而且在子路由里，都添加了一个<code>title</code>的变量。然后在<code>TodoListComponent</code>里面就可以使用这个变量，比如在页面上显示。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent &#123;</span><br><span class="line"></span><br><span class="line">    newTodo: Todo = <span class="keyword">new</span> Todo();</span><br><span class="line"></span><br><span class="line">    todos: Todo[];</span><br><span class="line"></span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> todoService: TodoService, <span class="keyword">private</span> route: ActivatedRoute</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.todos = <span class="keyword">this</span>.route.snapshot.data[<span class="string">'todos'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.title = <span class="keyword">this</span>.route.data[<span class="string">'title'</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过这种方式，在每个路由上配置title属性，然后就可以用一种通用的方式来实现在页面上显示面包屑导航栏的功能。</p><p>但是，在这个实例中，我们要用<code>data</code>上添加的<code>role: 'CUSTOMER'</code>，用它来表示当前的这个路径，需要有<code>CUSTOMER</code>角色的用户才能访问。然后在<code>MyTodoGuard</code>里用它来判断：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyTodoGuard <span class="keyword">implements</span> CanActivateChild &#123;</span><br><span class="line"></span><br><span class="line">    canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.authService.isLogdedin()) &#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">'You need to login!'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.router.navigate([<span class="string">'/home'</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> requiredRole = next.data[<span class="string">'role'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requiredRole == <span class="literal">null</span> || <span class="keyword">this</span>.authService.hasRole(requiredRole)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们从将要激活的路由的数据里面得到<code>role</code>，然后判断当前用户是否具有这个角色。这样，我们的这个<code>MyTodoGuard</code>，可以把它定义在根路径上，就可以作为一个通用的用户权限验证的<code>Guard</code>来使用。只要路径上存在这个值，就说明需要权限。</p><p>参考资料</p><ul><li><a href="http://codin.im/2016/11/12/angular2-route-2-guard-resolve/" target="_blank" rel="noopener">angular2-route-2-guard-resolve</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Angular2提供了2种组件，&lt;code&gt;Guard&lt;/code&gt;和&lt;code&gt;Resolve&lt;/code&gt;。&lt;code&gt;Guard&lt;/code&gt;顾名思义就是用来保护一个路径。可以用来判断用户只有在满足一定的条件的情况下才能打开这个路径对应的页面。&lt;code&gt;Resolv
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="router" scheme="https://qingshaoxi.github.io/blog/tags/router/"/>
    
      <category term="guard" scheme="https://qingshaoxi.github.io/blog/tags/guard/"/>
    
  </entry>
  
  <entry>
    <title>水调歌头·明月几时有</title>
    <link href="https://qingshaoxi.github.io/blog/post/shui-diao-ge-tou.html"/>
    <id>https://qingshaoxi.github.io/blog/post/shui-diao-ge-tou.html</id>
    <published>2018-07-26T13:15:19.000Z</published>
    <updated>2019-02-27T07:32:29.953Z</updated>
    
    <content type="html"><![CDATA[<p>水调歌头·明月几时有<br>[宋] 苏轼<br>丙辰中秋，欢饮达旦，大醉，作此篇。兼怀子由。<br>明月几时有，把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，<br>高处不胜寒。<br>起舞弄清影，何似在人间！</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，<br>此事古难全。<br>但愿人长久，千里共婵娟</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;水调歌头·明月几时有&lt;br&gt;
[宋] 苏轼&lt;br&gt;
丙辰中秋，欢饮达旦，大醉，作此篇。兼怀子由。&lt;br&gt;
明月几时有，把酒问青天。&lt;br&gt;
不知天上宫阙，今夕是何年？&lt;br&gt;
我欲乘风归去，又恐琼楼玉宇，&lt;br&gt;
高处不胜寒。&lt;br&gt;
起舞弄清影，何似在人间！&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="poetry" scheme="https://qingshaoxi.github.io/blog/tags/poetry/"/>
    
      <category term="水调歌头" scheme="https://qingshaoxi.github.io/blog/tags/%E6%B0%B4%E8%B0%83%E6%AD%8C%E5%A4%B4/"/>
    
      <category term="苏轼" scheme="https://qingshaoxi.github.io/blog/tags/%E8%8B%8F%E8%BD%BC/"/>
    
  </entry>
  
  <entry>
    <title>ПОРОГ</title>
    <link href="https://qingshaoxi.github.io/blog/post/%D0%9F%D0%9E%D0%A0%D0%9E%D0%93.html"/>
    <id>https://qingshaoxi.github.io/blog/post/ПОРОГ.html</id>
    <published>2018-07-21T14:17:24.000Z</published>
    <updated>2019-02-27T07:32:29.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="порог门槛"><a class="markdownIt-Anchor" href="#порог门槛"></a> ПОРОГ(门槛)</h3><p>门 槛</p><p>我梦见一幢大楼。</p><p>正墙上一道窄小的门敞开着；门里阴森森的、黑沉沉的。高高的门槛前站着一位姑娘…一位俄罗斯姑娘。</p><p>阵阵寒气从茫茫冥色中飘了出来；随着这一阵阵冷飕飕的寒气，从大楼深处传来一个缓慢、低沉的声音。</p><p>“你呀，想要跨进这道门槛，——你知道是什么在等待你吗？”</p><p>“知道，”姑娘回答道。</p><p>“是寒冷、饥饿、仇恨、讥笑、蔑视、屈辱、监狱、疾病、甚至死亡，知道吗？”</p><p>“知道。”</p><p>“远离尘世、孤苦伶仃呢？”</p><p>“知道。我已作好准备。我能够承受一切苦难、一切打击。”</p><p>“不仅能承受来自敌人的打击，而且也能承受来自亲人、来自朋友的打击吗？”</p><p>“是的…也能承受来自他们的打击。”</p><p>“好。你准备作出牺牲吗？”</p><p>“是的。”</p><p>“去作无名的牺牲吗？你一旦死去，任何人…甚至任何人都不会知道，该悼念的是何许人！”</p><p>“我既不需要感激，也不需要怜悯。我不需要出名。”</p><p>“你准备犯罪吗？”</p><p>姑娘低下了头…</p><p>“对犯罪我也作了准备。”</p><p>那声音没有马上追问下去。</p><p>“你知道吗，”那声音终于说道，“你可能会放弃现在的信仰，你可能会认识到自己受骗上当，白白毁掉了自己的青春年华？”</p><p>“这我也知道。不过我还是要进去。”</p><p>“进来吧！”</p><p>姑娘跨进了门槛，一道沉甸甸的门帘在她身后落了下来。</p><p>“傻姑娘！”有人在后面咬牙切齿地说。</p><p>“圣女！”不知从哪儿传来这样的回答。</p><p>ПОРОГ</p><p>Я вижу громадное здание.<br>В передней стене узкая дверь раскрыта настежь; за дверью — угрюмая мгла. Перед высоким порогом стоит девушка… Русская девушка.<br>Морозом дышит та непроглядная мгла; и вместе с леденящей струёй выносится из глубины здания медлительный, глухой голос.<br>— О ты, что желаешь переступить этот порог, знаешь ли ты, что тебя ожидает?<br>— Знаю,— отвечает девушка.<br>— Холод, голод, ненависть, насмешка, презрение, обида, тюрьма, болезнь и самая смерть?<br>— Знаю.<br>— Отчуждение полное, одиночество?<br>— Знаю… Я готова. Я перенесу все страдания, все удары.<br>— Не только от врагов — но и от родных, от друзей?<br>— Да… и от них.<br>— Хорошо. Ты готова на жертву?<br>— Да.<br>— На безымянную жертву? Ты погибнешь — и никто… никто не будет даже знать, чью память почтить!..<br>— Мне не нужно ни благодарности, ни сожаления. Мне не нужно имени.<br>— Готова ли ты на преступление?<br>Девушка потупила голову…<br>— И на преступление готова.<br>Голос не тотчас возобновил свои вопросы.<br>— Знаешь ли ты,— заговорил он, наконец,— что ты можешь разувериться в том, чему веришь теперь, можешь понять, что обманулась и даром погубила свою молодую жизнь?<br>— Знаю и это. И всё-таки я хочу войти.<br>— Войди!<br>Девушка перешагнула порог — и тяжёлая завеса упала за нею.<br>— Дура!— проскрежетал кто-то сзади.<br>— Святая!— принеслось откуда-то в ответ.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;порог门槛&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#порог门槛&quot;&gt;&lt;/a&gt; ПОРОГ(门槛)&lt;/h3&gt;
&lt;p&gt;门 槛&lt;/p&gt;
&lt;p&gt;我梦见一幢大楼。&lt;/p&gt;
&lt;p&gt;正墙上一道窄小的门敞开着；门里阴森森的、黑沉沉的。高高的
      
    
    </summary>
    
    
      <category term="poetry" scheme="https://qingshaoxi.github.io/blog/tags/poetry/"/>
    
      <category term="屠格涅夫" scheme="https://qingshaoxi.github.io/blog/tags/%E5%B1%A0%E6%A0%BC%E6%B6%85%E5%A4%AB/"/>
    
      <category term="门槛" scheme="https://qingshaoxi.github.io/blog/tags/%E9%97%A8%E6%A7%9B/"/>
    
  </entry>
  
  <entry>
    <title>如何使用nodejs暴力抓取拉钩公司信息</title>
    <link href="https://qingshaoxi.github.io/blog/post/lagou-company-spider.html"/>
    <id>https://qingshaoxi.github.io/blog/post/lagou-company-spider.html</id>
    <published>2018-07-04T08:07:33.000Z</published>
    <updated>2019-02-27T07:32:29.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先整理思路"><a class="markdownIt-Anchor" href="#首先整理思路"></a> 首先整理思路</h3><blockquote><p>拉勾公司主页地址 <code>https://www.lagou.com/gongsi/id.html</code>, 所以我们主要要得到公司id，然后用id请求主页，抓取主页中我们需要的信息。<br>进入公司页面，测试中发现，每个城市代码是0-359中的一个，所以构造一个0-359的数组，<code>a = [...Array(360).keys()]</code><br>融资阶段是 <code>b = [...Array(8).keys()]</code>,0-8的数组<br>行业领域是 <code>c = [24, 25, 33, 27, 29, 45, 31, 28, 47, 34, 35, 43, 32, 41, 26, 48, 38, 49, 15793, 15794, 10594]</code><br>然后用这三个数组排列组合，然后去访问<code>https://www.lagou.com/gongsi/a[i]-b[j]-c[k]</code><br>从搜索到的列表中找到公司id所在位置 <code>ids = Array.from($('#company_list .item_con_list').children()) .map(item =&gt; $(item).find('a').data('lg-tj-cid'))</code><br>储存ids</p></blockquote><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><p>详见<a href="https://github.com/whyour/lagou-company-spider" target="_blank" rel="noopener">github</a><br>有问题可以评论或者提issue</p><h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3><p><a href="https://github.com/sindresorhus/p-queue" target="_blank" rel="noopener">p-queue</a><br><a href="https://github.com/sindresorhus/p-retry" target="_blank" rel="noopener">p-retry</a><br><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a><br><a href="https://github.com/yesvods/lagou-spider" target="_blank" rel="noopener">lagou-spider</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先整理思路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#首先整理思路&quot;&gt;&lt;/a&gt; 首先整理思路&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;拉勾公司主页地址 &lt;code&gt;https://www.lagou.com/gongsi/id.
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://qingshaoxi.github.io/blog/tags/nodejs/"/>
    
      <category term="puppeteer" scheme="https://qingshaoxi.github.io/blog/tags/puppeteer/"/>
    
      <category term="lagou" scheme="https://qingshaoxi.github.io/blog/tags/lagou/"/>
    
  </entry>
  
  <entry>
    <title>如何用nodejs和mongodb写一个的api</title>
    <link href="https://qingshaoxi.github.io/blog/post/api.html"/>
    <id>https://qingshaoxi.github.io/blog/post/api.html</id>
    <published>2018-06-30T08:39:26.000Z</published>
    <updated>2019-02-27T07:32:29.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先给vps上装上nodejs和mongodb"><a class="markdownIt-Anchor" href="#先给vps上装上nodejs和mongodb"></a> 先给vps上装上<code>nodejs</code>和<code>mongodb</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install nodejs</span><br><span class="line">apt install mongodb</span><br></pre></td></tr></table></figure><h3 id="写一个用express框架的node-server用koa也一样"><a class="markdownIt-Anchor" href="#写一个用express框架的node-server用koa也一样"></a> 写一个用express框架的，node server，用koa也一样</h3><h4 id="创建一个mongoose-scheme相当于存入数据库的数据结构模型"><a class="markdownIt-Anchor" href="#创建一个mongoose-scheme相当于存入数据库的数据结构模型"></a> 创建一个mongoose scheme,相当于存入数据库的数据结构模型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'yiYan'</span>, <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    content: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">from</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    creator: <span class="built_in">String</span>,</span><br><span class="line">    yid: <span class="built_in">String</span>,</span><br><span class="line">    created_at: &#123;<span class="keyword">type</span>: <span class="built_in">Number</span>, <span class="keyword">default</span>: (<span class="built_in">Date</span>.now()/<span class="number">1000</span>).toPrecision(<span class="number">10</span>)&#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="创建一个node-server"><a class="markdownIt-Anchor" href="#创建一个node-server"></a> 创建一个node server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var mongoose = require(&apos;mongoose&apos;);</span><br><span class="line"></span><br><span class="line">var config = require(&apos;./config&apos;); //读取配置文件config.js信息</span><br><span class="line">var Yiyan = require(&apos;./app/models/yiyan&apos;); //获取 yiyan model 信息</span><br><span class="line">var port = process.env.PORT || 8080; // 设置启动端口</span><br><span class="line">// 设置response头信息</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Origin&apos;, &apos;https://ninesix.cc&apos;);</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;GET, POST, OPTIONS, PUT, PATCH,DELETE&apos;);</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Credentials&apos;, true);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">    res.send(&apos;Hello! The API is at http://localhost:&apos; + port + &apos;/api&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// API 路由 -------------------</span><br><span class="line">app.get(&apos;/yiyan&apos;, function (req, res) &#123;</span><br><span class="line"></span><br><span class="line">    Yiyan.aggregate([&#123; $sample: &#123; size: 1 &#125; &#125;], function (err, data) &#123;</span><br><span class="line">        if (err) throw err;</span><br><span class="line">        res.send(&#123; code: 200, data: data[0] &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/yi&apos;, function (req, res) &#123;</span><br><span class="line"></span><br><span class="line">    var user = new Yiyan(&#123;</span><br><span class="line">        content: &quot;这是一个测试内容&quot;,</span><br><span class="line">        from: &quot;hunter&quot;,</span><br><span class="line">        type: &quot;e&quot;,</span><br><span class="line">        creator: &quot;hunter&quot;,</span><br><span class="line">        yid: &quot;12345&quot;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    user.save(function (err, data) &#123;</span><br><span class="line">        res.send(data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port);</span><br><span class="line">console.log(&apos;Magic happens at http://localhost:&apos; + port);</span><br></pre></td></tr></table></figure><h4 id="设置mongodb服务器配置"><a class="markdownIt-Anchor" href="#设置mongodb服务器配置"></a> 设置mongodb服务器配置</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">'database'</span>: <span class="string">'mongodb://用户名:密码@服务器IP:27017/collection名'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><blockquote><p>完整源码 <a href="https://github.com/whyour/yiyanApi.git" target="_blank" rel="noopener">node api</a><br>我的api <a href="https://api.ninesix.cc/yiyan" target="_blank" rel="noopener">yiyan</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先给vps上装上nodejs和mongodb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#先给vps上装上nodejs和mongodb&quot;&gt;&lt;/a&gt; 先给vps上装上&lt;code&gt;nodejs&lt;/code&gt;和&lt;code&gt;mongodb&lt;/
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://qingshaoxi.github.io/blog/tags/nodejs/"/>
    
      <category term="mongodb" scheme="https://qingshaoxi.github.io/blog/tags/mongodb/"/>
    
      <category term="restful" scheme="https://qingshaoxi.github.io/blog/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>舟夜书所见</title>
    <link href="https://qingshaoxi.github.io/blog/post/zhou-ye-shu-suo-jian.html"/>
    <id>https://qingshaoxi.github.io/blog/post/zhou-ye-shu-suo-jian.html</id>
    <published>2018-06-18T09:22:03.000Z</published>
    <updated>2019-02-27T07:32:29.965Z</updated>
    
    <content type="html"><![CDATA[<p>月黑见渔灯，<br>孤光一点萤。<br>微微风簇浪，<br>散作满河星。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;月黑见渔灯，&lt;br&gt;
孤光一点萤。&lt;br&gt;
微微风簇浪，&lt;br&gt;
散作满河星。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="poetry" scheme="https://qingshaoxi.github.io/blog/tags/poetry/"/>
    
      <category term="查慎行" scheme="https://qingshaoxi.github.io/blog/tags/%E6%9F%A5%E6%85%8E%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>angular6中使用httpInterceptor处理前端请求</title>
    <link href="https://qingshaoxi.github.io/blog/post/httpInterceptor.html"/>
    <id>https://qingshaoxi.github.io/blog/post/httpInterceptor.html</id>
    <published>2018-06-15T11:36:34.000Z</published>
    <updated>2019-02-27T07:32:29.933Z</updated>
    
    <content type="html"><![CDATA[<p>在前端项目中，往往在请求服务端的 api 的时候，我们需要做一些跨域、统一前缀、添加 cookie 等 header 信息的处理，这时候，在  angular 中，就用到了 <code>httpInterceptor</code>，下面介绍如何在 angular 中使用 httpInterceptor。</p><h3 id="在angular项目根目录下创建service"><a class="markdownIt-Anchor" href="#在angular项目根目录下创建service"></a> 在<code>angular</code>项目根目录下创建<code>service</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g service httpInterceptor</span><br></pre></td></tr></table></figure><p>httpInterceptorService 其实就是一个实现了 angular 中 HttpInterceptor 接口的 service，然后实现接口中的 intercept 方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpInterceptorService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入angularcommonhttp-模块"><a class="markdownIt-Anchor" href="#引入angularcommonhttp-模块"></a> 引入@angular/common/http 模块</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  HttpEvent, HttpInterceptor, HttpHandler,</span><br><span class="line">  HttpRequest, HttpResponse</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br></pre></td></tr></table></figure><h3 id="引入-rxjs-操作符"><a class="markdownIt-Anchor" href="#引入-rxjs-操作符"></a> 引入 rxjs 操作符</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; finalize, tap, catchError, map &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br></pre></td></tr></table></figure><h3 id="finally-code"><a class="markdownIt-Anchor" href="#finally-code"></a> finally code</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HttpInterceptorService <span class="keyword">implements</span> HttpInterceptor &#123;</span><br><span class="line">  intercept(req: HttpRequest&lt;<span class="built_in">any</span>&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> secureReq: HttpRequest&lt;<span class="built_in">any</span>&gt; = req;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;config.apiUrl&#125;</span>/api/`</span>;   <span class="comment">//添加api统一前缀</span></span><br><span class="line">    <span class="keyword">const</span> params = req.params.append(<span class="string">'t'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime().toString());  <span class="comment">//请求中添加时间戳</span></span><br><span class="line">    secureReq = req.clone(&#123;</span><br><span class="line">        url: url + req.url,</span><br><span class="line">        params: params</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> started = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> ok: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">return</span> next.handle(secureReq).pipe(</span><br><span class="line">        tap(</span><br><span class="line">            <span class="comment">// Succeeds when there is a response; ignore other events</span></span><br><span class="line">            event =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> response = event <span class="keyword">as</span> HttpResponse&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">                ok = event <span class="keyword">instanceof</span> HttpResponse ? <span class="string">'succeeded'</span> : <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">if</span> (response.body) &#123;    <span class="comment">//请求的body直接拿到返回的数据，这时可判断错误码等信息。</span></span><br><span class="line">                    (event <span class="keyword">as</span> <span class="built_in">any</span>).body = response.body.data;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error =&gt; &#123;</span><br><span class="line">                error.method = req.method;</span><br><span class="line">                ok = <span class="string">'failed'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        finalize(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elapsed = <span class="built_in">Date</span>.now() - started;  <span class="comment">//可计算出请求所消耗时间</span></span><br><span class="line">            <span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;req.method&#125;</span> "<span class="subst">$&#123;req.urlWithParams&#125;</span>" <span class="subst">$&#123;ok&#125;</span> in <span class="subst">$&#123;elapsed&#125;</span> ms.`</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前端项目中，往往在请求服务端的 api 的时候，我们需要做一些跨域、统一前缀、添加 cookie 等 header 信息的处理，这时候，在  angular 中，就用到了 &lt;code&gt;httpInterceptor&lt;/code&gt;，下面介绍如何在 angular 中使用 h
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="angular6" scheme="https://qingshaoxi.github.io/blog/tags/angular6/"/>
    
      <category term="httpInterceptor" scheme="https://qingshaoxi.github.io/blog/tags/httpInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>用angular/cli和typescript开发npm模块</title>
    <link href="https://qingshaoxi.github.io/blog/post/ts-npm.html"/>
    <id>https://qingshaoxi.github.io/blog/post/ts-npm.html</id>
    <published>2018-06-01T02:49:19.000Z</published>
    <updated>2019-02-27T07:32:29.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1使用angularcli新建一个项目"><a class="markdownIt-Anchor" href="#1使用angularcli新建一个项目"></a> 1.使用angular/cli新建一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new ng-hcharts</span><br></pre></td></tr></table></figure><p>在这之前确认你以全局安装<code>angular/cli</code></p><h3 id="2在packagejson中的script加入"><a class="markdownIt-Anchor" href="#2在packagejson中的script加入"></a> 2.在<code>package.json</code>中的script加入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"build": "rimraf ./built/* ./codegen/* &amp;&amp; ngc -p tsconfig-dist.json",</span><br><span class="line">"build:ngm": "ngm build -p src --clean"</span><br></pre></td></tr></table></figure><p>这里面用到了两个其他模块<a href="https://github.com/valor-software/ngm-cli" target="_blank" rel="noopener">ngm-cli</a>和<a href="https://github.com/isaacs/rimraf" target="_blank" rel="noopener">rimraf</a>需要全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ngm-cli</span><br><span class="line">npm i -g rimraf</span><br></pre></td></tr></table></figure><h3 id="3在src目录中新建一个组件你需要发布的组件"><a class="markdownIt-Anchor" href="#3在src目录中新建一个组件你需要发布的组件"></a> 3.在<code>src</code>目录中新建一个组件，你需要发布的组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g component ng-hcharts</span><br></pre></td></tr></table></figure><h3 id="4在src目录下初始化一个packagejson"><a class="markdownIt-Anchor" href="#4在src目录下初始化一个packagejson"></a> 4.在src目录下初始化一个package.json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ng-hcharts"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.6"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Responsive highcharts for Angular2+ base on highcharts"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+ssh://git@github.com/whyour/ng-hcharts.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"highcharts"</span>,</span><br><span class="line">    <span class="string">"angular2+"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"whyour"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/whyour/ng-hcharts/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/whyour/ng-hcharts#readme"</span>,</span><br><span class="line">  <span class="attr">"peerDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@angular/common"</span>: <span class="string">"^6.0.3"</span>,</span><br><span class="line">    <span class="attr">"@angular/compiler"</span>: <span class="string">"^6.0.3"</span>,</span><br><span class="line">    <span class="attr">"@angular/core"</span>: <span class="string">"^6.0.3"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"~2.7.2"</span>,</span><br><span class="line">    <span class="attr">"highcharts"</span>: <span class="string">"^6.1.0"</span>,    </span><br><span class="line">    <span class="attr">"rxjs"</span>: <span class="string">"^6.2.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择或设置自己所需要的信息。然后初始化一个tsconfig.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>确认你全局安装了typescript</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"../built"</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"inlineSources"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noEmitHelpers"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"skipLibCheck"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"stripInternal"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"suppressImplicitAnyIndexErrors"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noUnusedLocals"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noUnusedParameters"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es6"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"types"</span>: [</span><br><span class="line">      <span class="string">"jasmine"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"../scripts/typings.d.ts"</span>,</span><br><span class="line">    <span class="string">"./index.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"angularCompilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"genDir"</span>: <span class="string">"../temp/factories"</span>,</span><br><span class="line">    <span class="attr">"strictMetadataEmit"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"skipTemplateCodegen"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"fullTemplateTypeCheck"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5打包组件"><a class="markdownIt-Anchor" href="#5打包组件"></a> 5.打包组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run build:ngm</span><br></pre></td></tr></table></figure><h3 id="6发布npm包"><a class="markdownIt-Anchor" href="#6发布npm包"></a> 6.发布npm包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> built</span><br><span class="line">npm run patch</span><br><span class="line">npm run publish</span><br></pre></td></tr></table></figure><p><code>npm run patch</code>会增加一个bug版本，假如当前版本是<code>1.0.0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run patch /* 执行之后版本就是`1.0.1` */</span><br><span class="line">/* 再执行 */</span><br><span class="line">npm run patch /* 执行之后版本就是`1.0.2` */</span><br></pre></td></tr></table></figure><p>详见<a href="https://docs.npmjs.com/cli/version" target="_blank" rel="noopener">npm-version</a><br>完整模块<a href="https://github.com/whyour/ng-hcharts" target="_blank" rel="noopener">ng-hcharts</a><br><a href="https://github.com/whyour/ng-hcharts-ele" target="_blank" rel="noopener">ng-hcharts-ele</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1使用angularcli新建一个项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1使用angularcli新建一个项目&quot;&gt;&lt;/a&gt; 1.使用angular/cli新建一个项目&lt;/h3&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="angular/cli" scheme="https://qingshaoxi.github.io/blog/tags/angular-cli/"/>
    
      <category term="typescript" scheme="https://qingshaoxi.github.io/blog/tags/typescript/"/>
    
      <category term="npm" scheme="https://qingshaoxi.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>TLS 1.3 is coming</title>
    <link href="https://qingshaoxi.github.io/blog/post/tls1-3.html"/>
    <id>https://qingshaoxi.github.io/blog/post/tls1-3.html</id>
    <published>2018-05-24T06:04:14.000Z</published>
    <updated>2019-02-27T07:32:29.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是tls-13"><a class="markdownIt-Anchor" href="#什么是tls-13"></a> 什么是TLS 1.3 ？</h3><blockquote><p><code>TLS 1.3</code>就是<code>TLS</code>的升级版本，TLS是一种为了互联网通信安全保障的一种安全协议，称为<code>传输层安全性协议</code>(Transport Layer Security)。</p></blockquote><p>截至2018年3月21日，TLS 1.3是一个已经成为建议标准（Proposed Standard）[10]的互联网草案[11]。它基于更早的TLS 1.2规范，与TLS 1.2的主要区别包括：</p><ul><li>将密钥协商和认证算法从密码包中分离出来。</li><li>移除脆弱和较少使用的命名椭圆曲线支持</li><li>移除MD5和SHA-224密码散列函数的支持</li><li>请求数字签名，即便使用之前的配置</li><li>集成HKDF和半短暂DH提议</li><li>替换使用PSK和票据的恢复</li><li>支持1-RTT握手并初步支持0-RTT</li><li>通过在(EC)DH密钥协议期间使用临时密钥来保证完善的前向安全性。</li><li>放弃许多不安全或过时特性的支持，包括数据压缩、重新协商、非AEAD密码本、静态RSA和静态DH密钥交换、自定义DHE分组、点格式协商、更改密码本规范的协议、UNIX时间的Hello消息，以及长度字段AD输入到AEAD密码本</li><li>禁止用于向后兼容性的SSL和RC4协商</li><li>集成会话散列的使用</li><li>弃用记录层版本号和冻结数以改进向后兼容性</li><li>将一些安全相关的算法细节从附录移动到标准，并将ClientKeyShare降级到附录</li><li>添加带有Poly1305消息验证码的ChaCha20流加密</li><li>添加Ed25519和Ed448数字签名算法</li><li>添加x25519和x448密钥交换协议</li></ul><blockquote><p>因为本博使用的是nginx，所以要先把openssl升级到1.1.1，目前的版本是1.1.0，所以只要编译安装openssl就可以，不需要编译nginx，目前chrome支持的是draft23，发文时间截止适用openssl1.1.1 pre2，进入服务器任意目录，执行如下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.openssl.org/<span class="built_in">source</span>/old/1.1.1/openssl-1.1.1-pre2.tar.gz</span><br><span class="line">tar -zxf openssl-1.1.1-pre2.tar.gz</span><br><span class="line"><span class="built_in">cd</span>  openssl-1.1.1-pre2</span><br><span class="line">./config  --prefix=/usr/<span class="built_in">local</span> --openssldir=/usr/<span class="built_in">local</span>/ssl</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>如果/usr/local下没有ssl文件夹，要自己新建一个ssl文件夹<code>mkdir ssl</code></p><p>查看openssl版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version -a</span><br></pre></td></tr></table></figure><p><code>debian</code>或者<code>Ubuntu</code>下安装<code>nginx</code>最新<code>stable</code>版，要先把<code>nginx</code>的包地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/debian/ stretch nginx</span><br><span class="line">deb-src http://nginx.org/packages/debian/ stretch nginx</span><br></pre></td></tr></table></figure><p>加入服务器<code>source.list</code>,我的是<code>debian</code>在<code>/etc/apt/source.list</code>，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><p>然后查看nginx版本<code>nginx -V</code>，结果如下图：<br><img src="https://i.loli.net/2019/01/05/5c30cee3b9ad9.jpg" alt="nginx-version.jpg"><br>最后修改nginx配置文件，在443端口server中添加如下内容：</p><blockquote><p>ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:<br>EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:<br>EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;<br>ssl_protocols TLSv1.2 TLSv1.3;</p></blockquote><p>另外，chrome要进入<code>chrome://flags</code>，搜索tls，选择 enabled(draft23)</p><p>开启前截图<br><img src="https://s2.ax1x.com/2019/01/06/FHC540.jpg" alt="tls1-2.jpg"><br>开启后截图<br><img src="https://s2.ax1x.com/2019/01/06/FHCoCV.jpg" alt="tls1-3.jpg"></p><h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">传输层安全性协议</a></li><li><a href="https://imququ.com/post/enable-tls-1-3.html" target="_blank" rel="noopener">低版本openssl开启tls1.3</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是tls-13&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是tls-13&quot;&gt;&lt;/a&gt; 什么是TLS 1.3 ？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;TLS 1.3&lt;/code&gt;就是&lt;code&gt;TLS&lt;/co
      
    
    </summary>
    
    
      <category term="TLS" scheme="https://qingshaoxi.github.io/blog/tags/TLS/"/>
    
      <category term="TLS1.3" scheme="https://qingshaoxi.github.io/blog/tags/TLS1-3/"/>
    
  </entry>
  
  <entry>
    <title>debian9 中文显示乱码</title>
    <link href="https://qingshaoxi.github.io/blog/post/locale.html"/>
    <id>https://qingshaoxi.github.io/blog/post/locale.html</id>
    <published>2018-05-20T15:13:27.000Z</published>
    <updated>2019-02-27T07:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="debian9修复文件中部分中文显示乱码"><a class="markdownIt-Anchor" href="#debian9修复文件中部分中文显示乱码"></a> debian9修复文件中部分中文显示乱码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANGUAGE</span>=en_US.UTF-8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANG</span>=en_US.UTF-8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LC_ALL</span>=en_US.UTF-8</span><br><span class="line">locale-gen en_US.UTF-8</span><br><span class="line">apt-<span class="builtin-name">get</span> install locale</span><br><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><blockquote><p><code>dpkg-reconfigure locales</code>配置是只选中<code>en_US.UTF-8</code>，然后tab键确认。</p></blockquote><p><code>locale</code> 命令查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;debian9修复文件中部分中文显示乱码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#debian9修复文件中部分中文显示乱码&quot;&gt;&lt;/a&gt; debian9修复文件中部分中文显示乱码&lt;/h3&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="debian" scheme="https://qingshaoxi.github.io/blog/tags/debian/"/>
    
      <category term="linux" scheme="https://qingshaoxi.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>angular6中使用highCharts</title>
    <link href="https://qingshaoxi.github.io/blog/post/ng-highcharts.html"/>
    <id>https://qingshaoxi.github.io/blog/post/ng-highcharts.html</id>
    <published>2018-05-06T14:17:25.000Z</published>
    <updated>2019-02-27T07:32:29.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全局安装-angularclinext"><a class="markdownIt-Anchor" href="#全局安装-angularclinext"></a> 全局安装 angular/cli@next</h3><p><code>npm i -g @angular/cli@next</code></p><h3 id="创建新项目"><a class="markdownIt-Anchor" href="#创建新项目"></a> 创建新项目</h3><p><code>ng new ng6hc</code></p><h3 id="进入-ng6hc-cd-ng6hc-执行-npm-i"><a class="markdownIt-Anchor" href="#进入-ng6hc-cd-ng6hc-执行-npm-i"></a> 进入 ng6hc <code>cd ng6hc</code> 执行 <code>npm i</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ng6hc</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><h3 id="安装-highcharts-依赖"><a class="markdownIt-Anchor" href="#安装-highcharts-依赖"></a> 安装 highcharts 依赖</h3><p><code>npm install highcharts-angular</code><br>Get package from NPM in your Angular app:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install highcharts-angular</span><br></pre></td></tr></table></figure><p>在 app.module.ts 添加 HighchartsChartComponent:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; HighchartsChartComponent &#125; <span class="keyword">from</span> <span class="string">'highcharts-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如过编译不通过，可以使用下面的方式引入，需要在app文件夹下创建 highcharts-chart.component.ts 文件</span></span><br><span class="line"><span class="comment">// import &#123; HighchartsChartComponent &#125; from './highcharts-chart.component';</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    HighchartsChartComponent,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install highcharts --save</span><br></pre></td></tr></table></figure><p>然后 app.component.ts, 引入 highcharts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Highcharts <span class="keyword">from</span> <span class="string">'highcharts'</span>;</span><br></pre></td></tr></table></figure><p>在 app.component.html 中使用组件 <code>highcharts-chart</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">highcharts-chart</span> </span></span><br><span class="line"><span class="tag">  [<span class="attr">Highcharts</span>]=<span class="string">"Highcharts"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  [<span class="attr">constructorType</span>]=<span class="string">"chartConstructor"</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">options</span>]=<span class="string">"chartOptions"</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">callbackFunction</span>]=<span class="string">"chartCallback"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  [(<span class="attr">update</span>)]=<span class="string">"updateFlag"</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">oneToOne</span>]=<span class="string">"oneToOneFlag"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 100%; height: 400px; display: block;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">highcharts-chart</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行-ng-serve"><a class="markdownIt-Anchor" href="#运行-ng-serve"></a> 运行 ng serve</h3><p>效果如下图：<br><img src="https://i.loli.net/2019/02/26/5c74fc5dacba0.png" alt="ng6hc.png"><br><a href="https://github.com/whyour/ng6hc.git" target="_blank" rel="noopener">demo 地址</a></p><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><p>后期做了一个用 angular 写的 highcharts 组件，<a href="https://github.com/whyour/ng-hcharts" target="_blank" rel="noopener">ng-hcharts</a> 可以支持 angular2+项目中使用。另外为了自适应宽度，在调用组件的时候，设置 highcharts 配置遍历时需要放在 setTimeout 中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;全局安装-angularclinext&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#全局安装-angularclinext&quot;&gt;&lt;/a&gt; 全局安装 angular/cli@next&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;npm i -g @ang
      
    
    </summary>
    
    
      <category term="angular6" scheme="https://qingshaoxi.github.io/blog/tags/angular6/"/>
    
      <category term="ng6" scheme="https://qingshaoxi.github.io/blog/tags/ng6/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow.js快速入门教程</title>
    <link href="https://qingshaoxi.github.io/blog/post/tensorFlow-js.html"/>
    <id>https://qingshaoxi.github.io/blog/post/tensorFlow-js.html</id>
    <published>2018-04-22T07:12:49.000Z</published>
    <updated>2019-02-27T07:32:29.955Z</updated>
    
    <content type="html"><![CDATA[<p>Google 在TensorFlow Dev Summit 2018上推出了TensorFlow.js，为浏览器中的机器学习（ML）模型打开了大门。这意味着Web开发人员可以做些事情，例如…</p><ol><li>构建隐私友好的AI功能。数据永远不会离开客户端，因此您可以构建深度学习模型而无需查看实际数据。</li><li>在您的应用中使用预先训练好的Python ML模型。有许多成功的基于Python的模型可以加载到浏览器中，并以最少的代码开始运行预测。</li><li>在Firebase云端函数中培训ML模型（当NodeJS支持登陆图书馆时）。 、、、、、</li><li>可能还有很多创意开发者会想到的其他东西。<br>在本例中，我们要做两件事情：（1）从头开始构建和训练一个简单的线性回归模型，（2）导入一个在Python中训练的数字识别器模型，以便从JavaScript应用程序中进行预测。</li></ol><p><img src="/postImg/tfjs-1.gif" alt=""></p><h2 id="为什么我们应该关心tensorflow"><a class="markdownIt-Anchor" href="#为什么我们应该关心tensorflow"></a> 为什么我们应该关心TensorFlow？</h2><p>TensorFlow是一款用于执行和分配数学运算的令人难以置信的工具，但是如果没有ML的背景和高质量数据的访问权限，它将对您完全无用。这不是魔术。一个成功的算法往往是许多小时的数据准备，探索性分析和实验的结果。</p><p>但是我有好消息…你可以使用高度流行的Keras Python库中的预训练模型来做出预测。所以你不需要成为具有博士学位的数据科学家来构建未来的ML驱动应用程序。</p><h2 id="构建应用程序"><a class="markdownIt-Anchor" href="#构建应用程序"></a> 构建应用程序</h2><p>首先，我们需要一个应用程序在网络上投放。当然，我将使用Angular CLI生成应用程序，但您可以在本课中使用任何JavaScript Web应用程序中的TensorFlow代码。</p><p>我故意忽略了视频中看到的图表和可绘制画布指令的代码，但您可以在源代码中找到它。</p><h3 id="第1步-生成一个角度的应用程序"><a class="markdownIt-Anchor" href="#第1步-生成一个角度的应用程序"></a> 第1步 - 生成一个角度的应用程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli </span><br><span class="line">ng tensorflowApp</span><br></pre></td></tr></table></figure><h3 id="第2步-安装tensorflowjs"><a class="markdownIt-Anchor" href="#第2步-安装tensorflowjs"></a> 第2步 - 安装Tensorflow.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tensorflowApp </span><br><span class="line">npm install @tensorflow/tfjs --save</span><br></pre></td></tr></table></figure><h2 id="训练一个基本的tensorflowjs线性模型"><a class="markdownIt-Anchor" href="#训练一个基本的tensorflowjs线性模型"></a> 训练一个基本的TensorFlow.js线性模型</h2><p>在下面的章节中，我将向您展示如何使用TensorFlow.js进行构建，训练和预测。我们的ML模型只是一个简单的线性回归，它将一维值作为输入，并尝试将一条直线拟合到数据集。<br><img src="/postImg/linear-regression.png" alt=""><br>模型训练完成后，我们会向用户显示一个表单输入，当数值发生变化时会进行新的预测。<br><img src="/postImg/angular-tensorflow-train.gif" alt=""></p><h3 id="第3步-导入tensorflowjs"><a class="markdownIt-Anchor" href="#第3步-导入tensorflowjs"></a> 第3步 - 导入TensorFlow.js</h3><p>我将写入所有的代码app.component.ts。注意train()组件初始化时我们如何调用该方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tf <span class="keyword">from</span> <span class="string">'@tensorflow/tfjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;...&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  linearModel: tf.Sequential;</span><br><span class="line">  prediction: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.train();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> train() &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  predict(val) &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第4步-建立机器学习模型"><a class="markdownIt-Anchor" href="#第4步-建立机器学习模型"></a> 第4步 - 建立机器学习模型</h3><p>机器学习模型通过迭代多批样本并慢慢优化预测来训练。大多数神经网络使用梯度下降的一些变化作为优化器 - 我们使用随机梯度下降（SGD）来最小化均方误差（MSE）。这是一个非常复杂的领域，可以填满整本书。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> train(): <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// Define a model for linear regression.</span></span><br><span class="line">  <span class="keyword">this</span>.linearModel = tf.sequential();</span><br><span class="line">  <span class="keyword">this</span>.linearModel.add(tf.layers.dense(&#123;units: <span class="number">1</span>, inputShape: [<span class="number">1</span>]&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prepare the model for training: Specify the loss and the optimizer.</span></span><br><span class="line">  <span class="keyword">this</span>.linearModel.compile(&#123;loss: <span class="string">'meanSquaredError'</span>, optimizer: <span class="string">'sgd'</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Training data, completely random stuff</span></span><br><span class="line">  <span class="keyword">const</span> xs = tf.tensor1d([<span class="number">3.2</span>, <span class="number">4.4</span>, <span class="number">5.5</span>]);</span><br><span class="line">  <span class="keyword">const</span> ys = tf.tensor1d([<span class="number">1.6</span>, <span class="number">2.7</span>, <span class="number">3.5</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Train</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.linearModel.fit(xs, ys)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'model trained!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第5步-使用模型进行预测"><a class="markdownIt-Anchor" href="#第5步-使用模型进行预测"></a> 第5步 - 使用模型进行预测</h3><p>现在我们的模型已经过训练，我们可以给它提供值来进行预测。TensorFlow运行在会话的上下文中，因此我们需要调用dataSyncTensor值来将数据提取到JavaScript中可用的某些内容中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predict(val: number) &#123;</span><br><span class="line">  <span class="keyword">const</span> output = <span class="keyword">this</span>.linearModel.predict(tf.tensor2d([val], [<span class="number">1</span>, <span class="number">1</span>])) <span class="keyword">as</span> any;</span><br><span class="line">  <span class="keyword">this</span>.prediction = <span class="built_in">Array</span>.from(output.dataSync())[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当HTML表单输入文件发生更改时，我们可以将此方法作为事件处理程序运行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TensorFlow says &#123;&#123; prediction &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> (<span class="attr">change</span>)=<span class="string">"predict($event.target.value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何使用预训练的python-keras模型"><a class="markdownIt-Anchor" href="#如何使用预训练的python-keras模型"></a> 如何使用预训练的Python Keras模型</h2><p>训练模式可以是非常CPU和内存密集型的-这就是为什么大部分车型都在训练的高性能图形处理器，可以有效地分发几十亿矩阵的乘法运算。</p><p>幸运的是，我们可以使用预先训练好的模型完全绕过这一步。这意味着我们可以直接跳到有趣的部分 - 做出预测。您可以在Kaggle内核上找到各种不同应用程序的模型。</p><p>在下面的步骤，我们会基于Keras，卷积神经网络转换成预测从著名的手写数字的值的模型MNIST数据集。</p><h3 id="第6步-将keras模型转换为tensorflowjs"><a class="markdownIt-Anchor" href="#第6步-将keras模型转换为tensorflowjs"></a> 第6步 - 将Keras模型转换为TensorFlow.js</h3><p>TensorFlow.js有一个Python CLI工具，可将h5保存在Keras中的模型转换为可用于Web的设置文件。通过运行来安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflowjs</span><br></pre></td></tr></table></figure><p>此时，您需要在本地系统上保存Keras模型。如果您为本课复制项目，则可以运行以下命令来生成模型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensorflowjs_converter --input_format keras \</span><br><span class="line">                       keras/cnn.h5 \</span><br><span class="line">                       src/assets</span><br></pre></td></tr></table></figure><p>目前，我将输出保存在Angular应用程序的assets文件夹中，但TF也可以从URL中读取，因此您还可以将模型文件保存在云存储存储桶中。</p><h3 id="第7步-加载模型"><a class="markdownIt-Anchor" href="#第7步-加载模型"></a> 第7步 - 加载模型</h3><p>现在我们加载一个简单的单行程模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> loadModel() &#123;</span><br><span class="line">  <span class="keyword">this</span>.model = <span class="keyword">await</span> tf.loadModel(<span class="string">'/assets/model.json'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第8步-从图像数据进行预测"><a class="markdownIt-Anchor" href="#第8步-从图像数据进行预测"></a> 第8步 - 从图像数据进行预测</h3><p>现在我们的模型已经加载完毕，它期待着四维图像数据的形状[any, 28, 28, 1]- 可以转换为批量，宽度像素，高度像素和颜色通道。一种更简单的方式来思考它只是一个具有单一颜色通道的图像阵列。</p><p>我们在tf.tidy中运行我们的预测来清理分配给张量的中间内存。基本上，我们只是想避免内存泄漏。</p><p>TensorFlow.js为我们提供了一个fromPixels帮助，可将ImageData HTML对象转换为张量。您还可以使用普通HTMLImageElement或甚至视频。在引擎盖下它将像素变成一个数字的3D矩阵。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> predict(imageData: ImageData) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> tf.tidy(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert the canvas pixels to a Tensor of the matching shape</span></span><br><span class="line">    <span class="keyword">let</span> img = tf.fromPixels(imageData, <span class="number">1</span>);</span><br><span class="line">    img = img.reshape([<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>]);</span><br><span class="line">    img = tf.cast(img, <span class="string">'float32'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make and format the predications</span></span><br><span class="line">    <span class="keyword">const</span> output = <span class="keyword">this</span>.model.predict(img) <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save predictions on the component</span></span><br><span class="line">    <span class="keyword">this</span>.predictions = <span class="built_in">Array</span>.from(output.dataSync()); </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的结果是一个由10个数值组成的数组，总和为1，这是一个称为softmax的预测函数。我们可以使用概率最高的索引作为数字的预测。</p><p>根据下面的预测，模型将解释画布上绘制的图像的值为2，置信度为93％。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0.02</span>, <span class="number">0.003</span>, <span class="number">0.93</span>, ...]</span><br></pre></td></tr></table></figure><blockquote><p>翻译自 <a href="https://angularfirebase.com/lessons/tensorflow-js-quick-start/" target="_blank" rel="noopener">tensorflow-js-app</a>  <a href="https://github.com/AngularFirebase/97-tensorflowjs-quick-start" target="_blank" rel="noopener">source code1</a>  <a href="https://github.com/whyour/tensorflowApp" target="_blank" rel="noopener">source code2</a></p></blockquote><h3 id="相关资料"><a class="markdownIt-Anchor" href="#相关资料"></a> 相关资料</h3><ul><li><a href="https://github.com/tensorflow/tfjs-converter" target="_blank" rel="noopener">tfjs-converter</a></li><li><a href="https://keras.io/" target="_blank" rel="noopener">keras</a></li><li><a href="https://www.tensorflow.org/" target="_blank" rel="noopener">tensorflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google 在TensorFlow Dev Summit 2018上推出了TensorFlow.js，为浏览器中的机器学习（ML）模型打开了大门。这意味着Web开发人员可以做些事情，例如…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建隐私友好的AI功能。数据永远不会离开客户端，因此您可
      
    
    </summary>
    
    
      <category term="TensorFlow.js" scheme="https://qingshaoxi.github.io/blog/tags/TensorFlow-js/"/>
    
      <category term="TensorFlow" scheme="https://qingshaoxi.github.io/blog/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>mac terminal快捷键</title>
    <link href="https://qingshaoxi.github.io/blog/post/terminal.html"/>
    <id>https://qingshaoxi.github.io/blog/post/terminal.html</id>
    <published>2018-04-02T06:45:40.000Z</published>
    <updated>2019-02-27T07:32:29.956Z</updated>
    
    <content type="html"><![CDATA[<p>ctrl + a/e 回到命令行的开头和结尾<br>ctrl + u/k 剪切光标前/后 所有单词<br>单词为单位移动：option + 方向键</p><a id="more"></a><p>ctrl + y 撤销上个操作<br>ctrl + w 删除光标前一个单词<br>ctrl + b/f 光标向前/后移动一个位置<br>ctrl + h 删除光标位置的前一个字符</p><p>history 显示使用过的命令</p><p>第一次按时，移动光标至行首；再次按时，回到原有位置CTRL+X<br>删除光标前一个字符，即退格（Backspace）CTRL+H<br>删除光标后一个字符，（相当于Delete）无任何字符时相当于exitCTRL+D<br>删除光标前所有字符CTRL+U<br>删除光标后所有字符；纵向制表符，在脚本中下移一行，用/x0b表示CTRL+K<br>删除光标前一个单词（根据空格识别单词分隔）CTRL+W<br>粘贴之前（CTRL+U/K/W）删除的内容CTRL+Y<br>清屏，相当于指令“clear”CTRL+L<br>查找并自动匹配之前使用过的指令CTRL+R<br>回车，相当于EnterCTRL+M<br>跳到新行，等同于回车CTRL+O<br>新起一行，命令行下等同于回车CTRL+J<br>横行制表符，在命令行中补齐指令，效果和Tab键相同CTRL+I<br>补齐指令TAB<br>上一条指令，等同于向上箭CTRL+P<br>下一条指令，等同于向下箭CTRL+N<br>使下一个特殊字符可以插入在当前位置,如CTRL-V 可以在当前位置插入一个字符,其ASCII是9, 否则一般情况下按结果是命令补齐CTRL+V<br>中断操作CTRL+C<br>冻结终端操作（暂停脚本）CTRL+S<br>恢复冻结（继续执行脚本）CTRL+Q<br>使下一个单词首字母大写, 同时光标前进一个单词,如光标停留在单词的某个字母上,如word中的o字母上, 则o字母变大写. 而不是wESC+C<br>使下一个单词所有字母变大写, 同时光标前进一个单词；如光标在o字母上, 则ord变大写, w不变.ESC+U<br>使下一个单词所有字母变小写, 同时光标前进一个单词；如光标在o字母上, 则ord变小写, w不变.ESC+I<br>将光标处的字符和光标前一个字符替换位置CTRL+T<br>重复运行最近一条以“word”开头的指令，如!ls 或 !l!word<br>调用上一条指令的最后一个参数作为当前指令对象,如，假设上一条指令为： ls abc.txt bbc.txt 那么， vi !$ 相当于： vi bbc.txt!$<br>调用执行指定编号的历史记录指令,如!2, !11</p><p><img src="/postImg/terminal.png" alt="ico原来的样子"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctrl + a/e 回到命令行的开头和结尾&lt;br&gt;
ctrl + u/k 剪切光标前/后 所有单词&lt;br&gt;
单词为单位移动：option + 方向键&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://qingshaoxi.github.io/blog/tags/mac/"/>
    
      <category term="terminal" scheme="https://qingshaoxi.github.io/blog/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>exchange server</title>
    <link href="https://qingshaoxi.github.io/blog/post/server.html"/>
    <id>https://qingshaoxi.github.io/blog/post/server.html</id>
    <published>2018-02-26T05:48:52.000Z</published>
    <updated>2019-02-27T07:32:29.948Z</updated>
    
    <content type="html"><![CDATA[<p>##exchange2016 server CU版本<br>下载地址：<a href="https://technet.microsoft.com/en-us/library/hh135098%28v=exchg.160%29.aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/hh135098(v=exchg.160).aspx</a></p><ol><li><p>首先，ExchangeServer2016安装需要域环境，且需要预先安装UCMA4.0运行库，这一点没问题，自己设置一下就可以了，否则规则检查那一块过不去。</p></li><li><p>第一个坑：直接在WindowsServer2016上安装ExchangeServer2016的原版是不行的。必须使用ExchangeServer2016 CU3以上的版本，CU3就是累积更新3。本人选的直接装CU5。如果使用原版，会卡在规则检查阶段，要求系统安装桌面体验，但WindowsServer2016带GUI安装后的添加服务器功能里是没有桌面体验的，这样就死胡同了。所以必须使用CU3以上的版本。</p></li><li><p>ExchangeServer2016 CU3本身其实是个完整的版本，类似于“ExchangeServer2016 with CU3”。象本人这样的新手一开始看到名字以为只是个更新包，其实直接下载安装就行了。</p></li></ol><p>##exchange 和 AD</p><p><a href="https://technet.microsoft.com/zh-cn/library/aa998561(v=exchg.160).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/zh-cn/library/aa998561(v=exchg.160).aspx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##exchange2016 server CU版本&lt;br&gt;
下载地址：&lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh135098%28v=exchg.160%29.aspx&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 解决浮点数值计算精度问题</title>
    <link href="https://qingshaoxi.github.io/blog/post/javascript-accuracy.html"/>
    <id>https://qingshaoxi.github.io/blog/post/javascript-accuracy.html</id>
    <published>2018-01-24T07:33:49.000Z</published>
    <updated>2019-02-27T07:32:29.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/postImg/code.jpg" alt="JavaScript 浮点数陷阱及解法"></p><p>众所周知，JavaScript 浮点数运算时经常遇到会 <code>0.000000001</code> 和 <code>0.999999999</code> 这样奇怪的结果，如 <code>0.1+0.2=0.30000000000000004</code>、<code>1-0.9=0.09999999999999998</code>，很多人知道这是浮点数误差问题，但具体就说不清楚了。本文帮你理清这背后的原理以及解决方案，还会向你解释JS中的大数危机和四则运算中会遇到的坑。</p><a id="more"></a><h2 id="浮点数的存储"><a class="markdownIt-Anchor" href="#浮点数的存储"></a> 浮点数的存储</h2><p>首先要搞清楚 JavaScript 如何存储小数。和其它语言如 Java 和 Python 不同，JavaScript 中所有数字包括整数和小数都只有一种类型 — <code>Number</code>。它的实现遵循 <a href="http://grouper.ieee.org/groups/754/" target="_blank" rel="noopener">IEEE 754</a> 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数（相关的还有float 32位单精度）。计算机组成原理中有过详细介绍，如果你不记得也没关系。</p><p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。</p><p>64位比特又可分为三个部分：</p><ul><li>符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数</li><li>指数位E：中间的 11 位存储指数（exponent），用来表示次方数</li><li>尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零</li></ul><p>￼<img src="/postImg/float.png" alt="64 bit allocation"></p><p>实际数字就可以用以下公式来计算：</p><p>￼<br><img src="/postImg/expression1.png" alt="latex expression"></p><p>注意以上的公式遵循科学计数法的规范，在十进制是为0&lt;M&lt;10，到二进行就是0&lt;M&lt;2。也就是说整数部分只能是1，所以可以被舍去，只保留后面的小数部分。如 4.5 转换成二进制就是 100.1，科学计数法表示是 1.001*2^2，舍去1后 <code>M = 001</code>。E是一个无符号整数，因为长度是11位，取值范围是 0~2047。但是科学计数法中的指数是可以为负数的，所以再减去一个中间数 1023，[0,1022]表示为负，[1024,2047] 表示为正。如4.5 的指数<code>E = 1025</code>，尾数M为 001。</p><p>最终的公式变成：</p><p><img src="/postImg/expression2.png" alt="latex expression"></p><p>所以 <code>4.5</code> 最终表示为（M=001、E=1025）：</p><p>￼<br><img src="/postImg/expression3.png" alt="4.5 allocation map"></p><p>(图片由此生成 <a href="http://www.binaryconvert.com/convert_double.html" target="_blank" rel="noopener">http://www.binaryconvert.com/convert_double.html</a>)</p><p>下面再以 <code>0.1</code> 例解释浮点误差的原因， <code>0.1</code> 转成二进制表示为 <code>0.0001100110011001100</code>(1100循环)，<code>1.100110011001100x2^-4</code>，所以 <code>E=-4+1023=1019</code>；M 舍去首位的1，得到 <code>100110011...</code>。最终就是：</p><p><img src="/postImg/expression5.png" alt="0.1 allocation map"></p><p>￼</p><p>转化成十进制后为 <code>0.100000000000000005551115123126</code>，因此就出现了浮点误差。</p><h3 id="为什么-0102030000000000000004"><a class="markdownIt-Anchor" href="#为什么-0102030000000000000004"></a> 为什么 <code>0.1+0.2=0.30000000000000004</code>？</h3><p>计算步骤为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> 和 <span class="number">0.2</span> 都转化成二进制后再进行运算</span><br><span class="line"><span class="number">0.00011001100110011001100110011001100110011001100110011010</span> +</span><br><span class="line"><span class="number">0.0011001100110011001100110011001100110011001100110011010</span> =</span><br><span class="line"><span class="number">0.0100110011001100110011001100110011001100110011001100111</span></span><br><span class="line">转成十进制正好是 <span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><h3 id="为什么-x01-能得到-01"><a class="markdownIt-Anchor" href="#为什么-x01-能得到-01"></a> 为什么 <code>x=0.1</code> 能得到 <code>0.1</code></h3><p>恭喜你到了看山不是山的境界。因为 mantissa 固定长度是 52 位，再加上省略的一位，最多可以表示的数是 <code>2^53=9007199254740992</code>，对应科学计数尾数是 <code>9.007199254740992</code>，这也是 JS 最多能表示的精度。它的长度是 16，所以可以使用 <code>toPrecision(16)</code> 来做精度运算，超过的精度会自动做凑整处理。于是就有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.10000000000000000555</span>.toPrecision(<span class="number">16</span>)</span><br><span class="line"><span class="comment">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></span><br><span class="line"><span class="comment">// 但你看到的 `0.1` 实际上并不是 `0.1`。不信你可用更高的精度试试：0.1.toPrecision(21) = 0.100000000000000005551</span></span><br></pre></td></tr></table></figure><h3 id="大数危机"><a class="markdownIt-Anchor" href="#大数危机"></a> 大数危机</h3><p>可能你已经隐约感觉到了，如果整数大于 9007199254740992 会出现什么情况呢？</p><p>由于 E 最大值是 1023，所以最大可以表示的整数是 <code>2^1024 - 1</code>，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 <code>2^1024</code> 开始就变成了 <code>Infinity</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1023</span>)</span><br><span class="line"><span class="number">8.98846567431158e+307</span> &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="literal">Infinity</span></span><br></pre></td></tr></table></figure><p>那么对于 <code>(2^53, 2^63)</code> 之间的数会出现什么情况呢？</p><ul><li><code>(2^53, 2^54)</code> 之间的数会两个选一个，只能精确表示偶数</li><li><code>(2^54, 2^55)</code> 之间的数会四个选一个，只能精确表示4个倍数</li><li>… 依次跳过更多2的倍数</li></ul><p>下面这张图能很好的表示 JavaScript 中浮点数和实数（Real Number）之间的对应关系。我们常用的 <code>(-2^53, 2^53)</code> 只是最中间非常小的一部分，越往两边越稀疏越不精确。<br><img src="/postImg/expression6.jpg" alt="fig1.jpg"></p><p>在淘宝早期的订单系统中把订单号当作数字处理，后来随意订单号暴增，已经超过了<br><code>9007199254740992</code>，最终的解法是把订单号改成字符串处理。</p><p>要想解决大数的问题你可以引用第三方库 <a href="https://github.com/MikeMcl/bignumber.js/" target="_blank" rel="noopener">bignumber.js</a>，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生的差很多。所以原生支持大数就很有必要了，现在 TC39 已经有一个 Stage 3 的提案 <a href="https://github.com/tc39/proposal-bigint" target="_blank" rel="noopener">proposal bigint</a>，大数问题有望彻底解决。在浏览器正式支持前，可以使用 Babel 7.0 来实现，它的内部是自动转换成 <a href="https://github.com/peterolson/BigInteger.js" target="_blank" rel="noopener">big-integer</a> 来计算，要注意的是这样能保持精度但运算效率会降低。</p><h3 id="toprecision-vs-tofixed"><a class="markdownIt-Anchor" href="#toprecision-vs-tofixed"></a> <code>toPrecision</code> vs <code>toFixed</code></h3><p>数据处理时，这两个函数很容易混淆。它们的共同点是把数字转成字符串供展示使用。注意在计算的中间过程不要使用，只用于最终结果。</p><p>不同点就需要注意一下：</p><ul><li><code>toPrecision</code> 是处理精度，精度是从左至右第一个不为0的数开始数起。</li><li><code>toFixed</code> 是小数点后指定位数取整，从小数点开始数起。</li></ul><p>两者都能对多余数字做凑整处理，也有些人用 <code>toFixed</code> 来做四舍五入，但一定要知道它是有 Bug 的。</p><p>如：<code>1.005.toFixed(2)</code> 返回的是 <code>1.00</code> 而不是 <code>1.01</code>。</p><p>原因： <code>1.005</code> <code>1.0005</code> 实际对应的数字是 <code>1.00499999999999989</code>，在四舍五入时全部被舍去！</p><p>解法：使用专业的四舍五入函数 <code>Math.round()</code> 来处理。但 <code>Math.round(1.005 * 100) / 100</code> 还是不行，因为 <code>1.005 * 100 = 100.49999999999999</code>。还需要把乘法和除法精度误差都解决后再使用 <code>Math.round</code>。可以使用后面介绍的 <code>number-precision#round</code> 方法来解决。</p><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><p>回到最关心的问题：如何解决浮点误差。首先，理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果。</p><h3 id="数据展示类"><a class="markdownIt-Anchor" href="#数据展示类"></a> 数据展示类</h3><p>当你拿到 <code>1.4000000000000001</code> 这样的数据要展示时，建议使用 <code>toPrecision</code> 凑整并 <code>parseFloat</code> 转成数字后再显示，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="number">1.4000000000000001</span>.toPrecision(<span class="number">12</span>)) === <span class="number">1.4</span>  <span class="comment">// True</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">封装成方法就是：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">num, precision=<span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>+<span class="built_in">parseFloat</span>(num.toPrecision(precision));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么选择 <code>12</code> 做为默认精度？这是一个经验的选择，一般选12就能解决掉大部分0001和0009问题，而且大部分情况下也够用了，如果你需要更精确可以调高。</p><h3 id="数据运算类"><a class="markdownIt-Anchor" href="#数据运算类"></a> 数据运算类</h3><p>对于运算类操作，如 <code>+-*/</code>，就不能使用 <code>toPrecision</code> 了。正确的做法是把小数转成整数后再运算。以加法为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 精确加法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> num1Digits= (num1.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>] ||<span class="string">''</span>).length;</span><br><span class="line">  <span class="keyword">const</span> num2Digits= (num2.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>] ||<span class="string">''</span>).length;</span><br><span class="line">  <span class="keyword">const</span> baseNum=<span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(num1Digits, num2Digits));</span><br><span class="line">  <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上方法能适用于大部分场景。遇到科学计数法如 <code>2.3e+1</code>（当数字精度大于21时，数字会强制转为科学计数法形式显示）时还需要特别处理一下。</p><h2 id="三方库"><a class="markdownIt-Anchor" href="#三方库"></a> 三方库</h2><p><a href="https://github.com/dt-fe/number-precision" target="_blank" rel="noopener">https://github.com/dt-fe/number-precision</a><br><a href="http://mathjs.org/" target="_blank" rel="noopener">math.js</a><br><a href="https://github.com/dtrebbien/BigDecimal.js" target="_blank" rel="noopener">BigDecimal.js</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" target="_blank" rel="noopener">Double-precision floating-point format</a></li><li><a href="http://floating-point-gui.de/" target="_blank" rel="noopener">What Every Programmer Should Know About Floating-Point Arithmetic</a></li><li><a href="https://www.youtube.com/watch?v=pQs_wx8eoQ8" target="_blank" rel="noopener">Why Computers are Bad at Algebra | Infinite Series</a></li><li><a href="http://jasss.soc.surrey.ac.uk/9/4/4.html" target="_blank" rel="noopener">Is Your Model Susceptible to Floating-Point Errors?</a></li><li><a href="https://zhuanlan.zhihu.com/ne-fe" target="_blank" rel="noopener">抓住数据的小尾巴 - JS浮点数陷阱及解法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/postImg/code.jpg&quot; alt=&quot;JavaScript 浮点数陷阱及解法&quot;&gt;&lt;/p&gt;
&lt;p&gt;众所周知，JavaScript 浮点数运算时经常遇到会 &lt;code&gt;0.000000001&lt;/code&gt; 和 &lt;code&gt;0.999999999&lt;/code&gt; 这样奇怪的结果，如 &lt;code&gt;0.1+0.2=0.30000000000000004&lt;/code&gt;、&lt;code&gt;1-0.9=0.09999999999999998&lt;/code&gt;，很多人知道这是浮点数误差问题，但具体就说不清楚了。本文帮你理清这背后的原理以及解决方案，还会向你解释JS中的大数危机和四则运算中会遇到的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端必看书籍</title>
    <link href="https://qingshaoxi.github.io/blog/post/front-end-books.html"/>
    <id>https://qingshaoxi.github.io/blog/post/front-end-books.html</id>
    <published>2018-01-12T08:37:38.000Z</published>
    <updated>2019-02-27T07:32:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awesome-web-dev-books"><a class="markdownIt-Anchor" href="#awesome-web-dev-books"></a> awesome-web-dev-books</h1><h2 id="如果有人让你推荐前端技术书请让他看这个列表"><a class="markdownIt-Anchor" href="#如果有人让你推荐前端技术书请让他看这个列表"></a> 如果有人让你推荐前端技术书，请让他看这个列表</h2><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>好的技术书籍可以帮助我们快速地成长，大部分人或多或少地受益于经典的技术书籍。在「前端大全」微信公号后台，我们经常能收到让帮忙推荐书籍的消息。这类的问题在 <a href="http://weibo.com/u/5261893910" target="_blank" rel="noopener">@前端大全 的微博</a> 和 <a href="http://group.jobbole.com/category/tech/webfront/" target="_blank" rel="noopener">伯乐在线的前端小组</a> 讨论中也不绝于耳。 6月30日，伯乐在线在「前端大全」微信公号<a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651550986&amp;idx=1&amp;sn=16b1ec6869bb07e3d820a78ec3dffd87#rd" target="_blank" rel="noopener">发起了一个讨论</a> （注：PC端无法看到大家的评论，需要关注微信公号后，从微信才可以看到），通过这个讨论话题，在评论中分享对自己帮助很大的前端技术书籍。</p><a id="more"></a><p>（前端大全）</p><h2 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h2><p><strong>《<a href="http://www.amazon.cn/mn/detailApp/ref=as_li_qf_sp_asin_tl?_encoding=UTF8&amp;tag=vastwork-23&amp;linkCode=as2&amp;asin=B003V42XZW&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003V42XZW" target="_blank" rel="noopener">JavaScript高级程序设计</a>》+ 入门级 +  306 票</strong></p><p>推荐语：</p><blockquote><p>**恐龙：**再次预言这本书能认真看十遍着都能进bat</p></blockquote><blockquote><p>**阿琛：**详尽地解读了JS这门语言的各个组成部分，透彻地剖析了JS所涉及的编程思想，深入浅出地演示了丰富的JS应用实例…读完这本书你不一定就能成为前端大牛，但如果你真的能把这本书读懂，吃透，那么你离JS高手肯定不远啦！</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00BQ7RMW0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BQ7RMW0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编写可维护的JavaScript</a>》+ 入门级 + 185 票</strong></p><p>推荐语：</p><blockquote><p>**Master.Huoooo：**乌龟书，很薄，但从工程实践的角度谈了常见的坑，其中的工作习惯值得coder们学习</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00FDHLWA2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00FDHLWA2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">jQuery 权威指南</a>》+ 入门级 + 132 票</strong></p><p>推荐语：</p><blockquote><p>**言楓：**全面介绍了jQuery 各个方法的使用，适合有JavaScript基础的入门</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0097CON2S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Javascript语言精粹</a>》/ 蝴蝶书 + 入门级 + 97 票</strong></p><p>推荐语：</p><blockquote><p>**宵伯特：**集 JS 之精华，弃其糟粕，人手一本，前端必备</p></blockquote><blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B0089TDFNS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0089TDFNS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">锋利的jQuery</a>》+ 入门级 + 91</strong></p></blockquote><p>推荐语：</p><blockquote><p>**Arron：**学习jQuery必备书籍，不能错过</p></blockquote><blockquote><p>**陶宇：**前后台通用快速使用jQuery，必备良书。</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B004VJM5KE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004VJM5KE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript DOM 编程艺术</a>（第二版）》+ 入门级 + 131 票</strong></p><p>推荐语：</p><blockquote><p>**SAVEKAI：**这本书的讲解方式非常亲切，人情味十足，初学者的福音。看完也能看看蝴蝶书。</p></blockquote><blockquote><p>**荣锋：**度过菜鸟阶段就会更多考虑性能和优化了《高性能 JavaScript》，当然还有其他好书这只是我的一个经历</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B016DWSF8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSF8M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">学习 JavaScript 数据结构与算法</a>》+ 入门级 + 31</strong></p><p>推荐语：</p><blockquote><p>**微笑的鱼：**很薄的一本书，很详细的讲解了使用js实现常用的数据结构和算法，对于更高效的使用js很有帮助。</p></blockquote><p><strong>《Understanding ECMAScript 6》+ 入门级 + 58</strong></p><p>推荐语：</p><blockquote><p><strong>蒋熙</strong>**：**JS高程作者写的关于ES6的，感觉还不错哦</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B016DWSEWO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSEWO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript忍者秘籍</a>》+ 进阶级 + 48</strong></p><p>推荐语：</p><blockquote><p><strong>向往</strong>**：**这本书是jQuery库创始人编写的一本深入剖析JavaScript语言的书 对JavaScript语言的重要部分（函数、闭包和原型）进行深入、全面的介绍，以及讲述跨浏览器代码如何编写</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B013SGB2AO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013SGB2AO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">高性能 JavaScript</a>》+ 进阶级 + 39</strong></p><p>推荐语：</p><blockquote><p>**椰子船长：**各种手段优化javascript</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B01A18WWAG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01A18WWAG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">ECMAScript 6 标准入门</a>》+ 进阶级 + 38</strong></p><p>推荐语：</p><blockquote><p><strong>刘传宗</strong>**：**ES6让JavaScript如虎添翼，编程体验更佳，阮一峰前辈的力作</p></blockquote><p><strong>《<a href="http://teropa.info/build-your-own-angular/" target="_blank" rel="noopener">Build Your Own AngularJS</a>》+ 进阶级 + 37</strong></p><p>推荐语：</p><blockquote><p><strong>少白</strong>**：**手把手教你撸出个angularjs框架，详细剖析原理和实现</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00GMXI1QY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GMXI1QY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Effective JavaScript:编写高质量JavaScript代码的68个有效方法</a>》+ 进阶级 + 35</strong></p><p>推荐语：</p><blockquote><p><strong>hzhang</strong>**：**细说了编程中容易忽略的细枝末节！</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00W34DZ8K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W34DZ8K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">你不知道的 JavaScript</a>》+ 进阶级 + 46</strong></p><p>推荐语：</p><blockquote><p>**undefined：<strong>肯定没入门级的书让你成长的那么快，但是两本书（上册+下册）能让你更深入的理解 JS 机制，对项目有个良好的把控，推荐入门后的人看。<br><strong>Yates💤</strong></strong> ：**详细的讲述了this，作用域，闭包，原型链等等，把js中比较难理解的部分用例子和通俗的语言讲解出来。</p></blockquote><p><strong>《Javascript王者归来》+ 进阶级 + 30</strong></p><p>推荐语：</p><blockquote><p><strong>李 Lee</strong>**：**每次阅读都有新发现</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00NN8GJGA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NN8GJGA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">单页web应用：JavaScript 从前端到后端</a>》+ 进阶级 + 18</strong></p><p>推荐语：</p><blockquote><p>**伟球迷：**通过这本书的指引了解前后端如何一起构建一个单页应用，对前端来说，也能了解一些前端以外的东西</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00D6MT3LG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D6MT3LG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 设计模式</a>》+ 进阶级 + 15</strong></p><p>推荐语：</p><blockquote><p>**窝窝：**本书介绍了十几种常用的设计模式，我觉得是理解别人代码之前必读的书，技巧非常多，值得多看。</p></blockquote><h2 id="html5-css"><a class="markdownIt-Anchor" href="#html5-css"></a> HTML5 &amp; CSS</h2><p><strong>《<a href="http://www.amazon.cn/gp/product/B015316ZWC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B015316ZWC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">HTML5 与 CSS3 基础教程</a>》+ 入门级 + 12</strong></p><p>推荐语：</p><blockquote><p><strong>砖头与少年</strong>**：**就是这本书把我带入前端的，非常适合初学前端的人看，浅显易懂，有配套代码！</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00IT1WM4Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IT1WM4Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入浅出 HTML 与 CSS</a>》+ 入门级 + 72</strong></p><p>推荐语：</p><blockquote><p>**猕猴桃：**就是它把我骗进前端的</p></blockquote><blockquote><p><strong><a href="http://xn--xj-fv6c.com" target="_blank" rel="noopener">周xj.com</a></strong>**：**纯小白的我第一次买的。懂了挺多。</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B01ET3FO86/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ET3FO86&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">CSS揭秘</a>》+ 进阶级 + 37</strong></p><p>推荐语：</p><blockquote><p><strong>飛魚</strong>**：**这本书讲了很多CSS的技巧，看完之后你会拍着脑袋说原来CSS还有这么多你不知道的东西。</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B00H706BIG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H706BIG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">HTML5 权威指南</a>》+ 进阶级 + 54</strong></p><p>推荐语：</p><blockquote><p><strong>陈军军</strong>**：**系统、全面，没有高深的用法，比较简单，如果对应用要求一般，这本书的知识完全能够应付过来，辅佐以js语言精粹，完全足够</p></blockquote><h2 id="综合类"><a class="markdownIt-Anchor" href="#综合类"></a> 综合类</h2><p><strong>《<a href="http://www.amazon.cn/gp/product/B003U8XUKQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003U8XUKQ&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编写高质量代码：Web前端开发修炼之道</a>》+ 进阶级 + 83 票</strong></p><p>推荐语：</p><blockquote><p>**jeremy•lee：**虽然是进阶级，但推荐稍有一点基础就开始阅读此书，在里边能找到好多你当下的一些小疑问，有好多技巧，包括团队配合下开发的技巧。能修正好多在开发过程中犯下的陋习，强烈推荐！</p></blockquote><p><strong>《<a href="http://www.amazon.cn/gp/product/B008UCHA58/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008UCHA58&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">精通正则表达式</a>》+ 进阶级 + 68</strong></p><p>推荐语：</p><blockquote><p><strong>赵晓冬</strong>**：**看完后会感觉技能绝对上一个层次</p></blockquote><blockquote><p>**李航：**全端通用技能必须get</p></blockquote><h2 id="你也可以来推荐"><a class="markdownIt-Anchor" href="#你也可以来推荐"></a> 你也可以来推荐</h2><p>以上推荐和点赞是来自微信「前端大全」微信公号，你也可以在 PR 中，用以下格式来荐上述列表中没有出现的好书： <strong>《书籍名称》</strong>、<strong>入门级 or 进阶级</strong>、<strong>一句话推荐语</strong></p><h2 id="让更多人知道"><a class="markdownIt-Anchor" href="#让更多人知道"></a> 让更多人知道</h2><p>后续我们将不断通过微信、微博和网站等来宣传这个经典前端技术书单。推荐人将一直署名在其中。如果这个经典前端技术书籍列表让你受益，请帮助通过朋友圈、微博、QQ空间等途径扩散给更多人，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;awesome-web-dev-books&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#awesome-web-dev-books&quot;&gt;&lt;/a&gt; awesome-web-dev-books&lt;/h1&gt;
&lt;h2 id=&quot;如果有人让你推荐前端技术书请让他看这个列表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如果有人让你推荐前端技术书请让他看这个列表&quot;&gt;&lt;/a&gt; 如果有人让你推荐前端技术书，请让他看这个列表&lt;/h2&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;好的技术书籍可以帮助我们快速地成长，大部分人或多或少地受益于经典的技术书籍。在「前端大全」微信公号后台，我们经常能收到让帮忙推荐书籍的消息。这类的问题在 &lt;a href=&quot;http://weibo.com/u/5261893910&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@前端大全 的微博&lt;/a&gt; 和 &lt;a href=&quot;http://group.jobbole.com/category/tech/webfront/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;伯乐在线的前端小组&lt;/a&gt; 讨论中也不绝于耳。 6月30日，伯乐在线在「前端大全」微信公号&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;amp;mid=2651550986&amp;amp;idx=1&amp;amp;sn=16b1ec6869bb07e3d820a78ec3dffd87#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;发起了一个讨论&lt;/a&gt; （注：PC端无法看到大家的评论，需要关注微信公号后，从微信才可以看到），通过这个讨论话题，在评论中分享对自己帮助很大的前端技术书籍。&lt;/p&gt;
    
    </summary>
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/categories/angular/"/>
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/categories/angular/JavaScript/"/>
    
    
      <category term="angular" scheme="https://qingshaoxi.github.io/blog/tags/angular/"/>
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://qingshaoxi.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="书籍" scheme="https://qingshaoxi.github.io/blog/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>判断某个元素是否在屏幕可视区域内</title>
    <link href="https://qingshaoxi.github.io/blog/post/element-in-box.html"/>
    <id>https://qingshaoxi.github.io/blog/post/element-in-box.html</id>
    <published>2017-06-30T16:15:28.000Z</published>
    <updated>2019-02-27T07:32:29.926Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mainOffsetTop = $(<span class="string">".body .blog ul li"</span>).first().offset().top;</span><br><span class="line">    <span class="keyword">var</span> mainHeight = $(<span class="string">".body .blog ul li"</span>).first().height();</span><br><span class="line">    <span class="keyword">var</span> winHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> winScrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">        <span class="keyword">if</span>(winScrollTop &gt; mainOffsetTop + mainHeight || winScrollTop &lt;　mainOffsetTop - winHeight)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"不在可视区域内"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"在可视区域内"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>屏幕的100%高</p></blockquote><blockquote><p>document.getElementById(“html”).clientHeight;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JavaScript</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yuansu = $(<span class="string">".body .blog ul li"</span>).first();</span><br><span class="line"><span class="keyword">var</span> mainOffsetTop = yuansu.offsetTop;</span><br><span class="line"><span class="keyword">var</span> mainHeight = yuansu.style.height;</span><br><span class="line"><span class="keyword">var</span> winHeight = <span class="built_in">window</span>.clietHeight;</span><br><span class="line"><span class="built_in">document</span>.body.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> winScrollTop = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">if</span>(winScrollTop &gt; mainOffsetTop + mainHeight || winScrollTop &lt;　mainOffsetTop - winHeight)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"不在可视区域内"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"在可视区域内"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainOffsetTop = $(&lt;span class=&quot;string&quot;&gt;&quot;.body .blog ul li&quot;&lt;/span&gt;).first().offset().top;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainHeight = $(&lt;span class=&quot;string&quot;&gt;&quot;.body .blog ul li&quot;&lt;/span&gt;).first().height();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; winHeight = $(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;).height();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;).scroll(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; winScrollTop = $(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;).scrollTop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(winScrollTop &amp;gt; mainOffsetTop + mainHeight || winScrollTop &amp;lt;　mainOffsetTop - winHeight)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;不在可视区域内&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;在可视区域内&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/categories/JavaScript/"/>
    
      <category term="jQuery" scheme="https://qingshaoxi.github.io/blog/categories/JavaScript/jQuery/"/>
    
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://qingshaoxi.github.io/blog/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>clientHeight和offsetHeight和scrollHeight的区别</title>
    <link href="https://qingshaoxi.github.io/blog/post/clientHeight-offsetHeight-scrollHeight.html"/>
    <id>https://qingshaoxi.github.io/blog/post/clientHeight-offsetHeight-scrollHeight.html</id>
    <published>2017-05-22T12:39:19.000Z</published>
    <updated>2019-02-27T07:32:29.923Z</updated>
    
    <content type="html"><![CDATA[<h4 id="clientheight"><a class="markdownIt-Anchor" href="#clientheight"></a> clientHeight</h4><p>大部分浏览器对 clientHeight 都没有什么异议，认为是元素可视区域的高度，也就是说元素或窗口中可以看到内容的这个区域的高度，即然是指可看到内容的区域，滚动条不算在内。但要注意padding是算在内。其计算方式为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clientHeight = topPadding + bottomPadding+ height - 水平滚动条高度</span><br></pre></td></tr></table></figure><h5 id="offsetheight"><a class="markdownIt-Anchor" href="#offsetheight"></a> offsetHeight</h5><p>在IE6，IE7，IE8， IE9以及最新的的FF, Chrome中，对于一般元素，都是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding + height + border = clientHeight + 滚动条 + 边框</span><br></pre></td></tr></table></figure><h5 id="scrollheight"><a class="markdownIt-Anchor" href="#scrollheight"></a> scrollHeight</h5><p>scrollHeight的争议比较大，有些浏览器认为scrollHeight可以小于clientHeight，有些认为scrollHeight至少应该等于clientHeight。但有一点是一样的，就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrollHeight &gt;= topPadding + bottomPadding + 内容margin box的高度</span><br></pre></td></tr></table></figure><p>在浏览器中的区别在于：</p><p><mark>IE6、IE7 认为scrollHeight 是内容高度，可以小于clientHeight</mark>。</p><p><mark>FF 认为scrollHeight 是内容高度，不过最小值是clientHeight。</mark></p><p>注： 以上都是对于一般元素而言的，body和documentElement的clientHeight, offsetHeight和scrollHeight在各个浏览器中的计算方式又不同。</p><p><mark>在所有的浏览器中，如果你想获取<strong>视窗可见部分</strong>的高度，应该使用<strong>documentElement.clientHeight</strong>，因为<strong>body.clientHeight</strong>是由它的<strong>内容</strong>决定的。</mark></p><h3 id="ff30"><a class="markdownIt-Anchor" href="#ff30"></a> <strong><mark>FF30</mark></strong></h3><p>注意：Firefox30中，水平滚动条的宽度是17个像素。</p><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding + body.border + body.height(CSS设置或内容撑的);</span><br><span class="line"></span><br><span class="line">clientHeight = body.padding + body.height(CSS设置或内容撑的);</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight;</span><br></pre></td></tr></table></figure><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.offsetHeight + body.margin;</span><br><span class="line"></span><br><span class="line">clientHeight = <span class="built_in">window</span>窗口可见高度;</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight</span><br></pre></td></tr></table></figure><p>因此，只是获取窗口可见高度，在FF中得用documentElement.clientHeight，获取整个页面的高度，则应该用documentElement.scrollHeight。</p><blockquote><p>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding +border + height；</span><br><span class="line"></span><br><span class="line">clientHeight = padding +height -水平滚动条的高度。</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;=clientHeight</span><br></pre></td></tr></table></figure><p><mark>总结：从body, documentElement,元素的结果分析，FireFox认为scrollHeight的最小高度是clientHeight。</mark></p><p><mark>offsetLeft = 元素border左上角到window视窗原点的距离 或 到offsetParent的border box顶部的距离。</mark></p><h3 id="chrome-39"><a class="markdownIt-Anchor" href="#chrome-39"></a> <strong><mark>Chrome 39</mark></strong></h3><p>注意：Chrome39中，水平滚动条的宽度是17个像素。</p><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding+ body.border + body.height（CSS设置或内容撑大）；</span><br><span class="line"></span><br><span class="line">clientHeight= body.pdding + body.height（CSS设置或内容撑大）；</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= offsetHeight; 并且scrollHeight &gt;= <span class="built_in">window</span>窗口可见高度；</span><br></pre></td></tr></table></figure><blockquote><p>如果body没有内容(空的)：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body.offsetHeight == documentElement.offsetHeight;</span><br><span class="line"></span><br><span class="line">body.clientHeight ==documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line">body.scrollHeight ==documentElement.scrollHeight;</span><br></pre></td></tr></table></figure><h4 id="而且以上属性的值都是浏览器的视窗高度"><a class="markdownIt-Anchor" href="#而且以上属性的值都是浏览器的视窗高度"></a> 而且以上属性的值都是浏览器的视窗高度。</h4><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = scrollHeight = body.offsetHeight+ body.margin;</span><br><span class="line"></span><br><span class="line">clientHeight = <span class="built_in">window</span>视窗可见高度;</span><br></pre></td></tr></table></figure><p><mark>如果body内容过短，则documentElement的offsetHeight和scrollHeight将比clientHeight小。</mark></p><p><mark>因此，只是获取页面窗口可视部分高度，在Chrome中用documentElement.clientHeight；获取整个页面内容最大高度（如果比窗口小，取窗口的高度），则应该用body.scrollHeight；获取页面内容的实际高度，应该使用body.offsetHeight()。</mark>========</p><blockquote><p>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding + border + height；</span><br><span class="line"></span><br><span class="line">clientHeight = padding + height -水平滚动条的高度；</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight；</span><br><span class="line"></span><br><span class="line">offsetLeft = 元素border左上角到画布原点的距离 或 到offsetParent的border box顶部的距离。</span><br></pre></td></tr></table></figure><h3 id="ie9"><a class="markdownIt-Anchor" href="#ie9"></a> <strong><mark>IE9</mark></strong></h3><p><mark>注意：IE9中，滚动条的宽度是17个像素。</mark></p><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding +body.border + body.height(CSS设置或内容撑大);</span><br><span class="line"></span><br><span class="line">clientHeight =  body.padding + body.height(CSS设置或内容撑大);</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight;</span><br></pre></td></tr></table></figure><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = clientHeight + 水平滚动条的高度;</span><br><span class="line"></span><br><span class="line">clientHeight = <span class="built_in">window</span>窗口可见高度</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight并且scrollHeight &gt;= body.offsetHeight</span><br></pre></td></tr></table></figure><p><mark>因此，只是获取window窗口可见高度，在IE9中得用documentElement.clientHeight，获取整个页面内容的高度，则应该用documentElement.scrollHeight。</mark></p><blockquote><p>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding +border + height。</span><br><span class="line"></span><br><span class="line">clientHeight = padding +height - 滚动条的宽度。</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;=clientHeight;</span><br></pre></td></tr></table></figure><p><mark>总结：从body, documentElement,元素的结果分析，IE9认为scrollHeight的最小高度是clientHeight。</mark></p><p><mark>从结果分析，IE9认为scrollHeight的最小高度是clientHeight。</mark></p><h3 id="ie8"><a class="markdownIt-Anchor" href="#ie8"></a> <mark><strong>IE8</strong></mark></h3><p><mark>注意：IE8中，滚动条的宽度是17个像素。</mark></p><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding +body.border + body.height(CSS设置或内容撑大);</span><br><span class="line"></span><br><span class="line">clientHeight =  body.padding + body.height(CSS设置或内容撑大);</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight;</span><br></pre></td></tr></table></figure><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = clientHeight + 水平滚动条的高度 + body.border</span><br><span class="line"></span><br><span class="line">clientHeight = <span class="built_in">window</span>窗口可见高度</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;= clientHeight并且scrollHeight &gt;= body.offsetHeight</span><br></pre></td></tr></table></figure><p><mark>因此，只是获取窗口可见高度，在IE8中得用documentElement.clientHeight，获取整个页面内容高度，则应该用documentElement.scrollHeight。</mark></p><blockquote><p>元素上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding +border + height。</span><br><span class="line"></span><br><span class="line">clientHeight = padding +height – 水平滚动条高度。</span><br><span class="line"></span><br><span class="line">scrollHeight &gt;=clientHeight</span><br></pre></td></tr></table></figure><p><mark>从结果分析，IE8认为scrollHeight的最小高度是clientHeight。</mark></p><p><mark>offsetLeft = 元素border左上角到画布原点的距离 或 到offsetParent的border box顶部的距离。</mark></p><h3 id="ie7"><a class="markdownIt-Anchor" href="#ie7"></a> <strong><mark>IE7</mark></strong></h3><p><mark>注意：IE7中，滚动条的宽度是17个像素。</mark></p><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding + body.border+ body.height(CSS设置或内容撑大)；</span><br><span class="line"></span><br><span class="line">clientHeight = body.height +body.padding – 水平滚动条高度；</span><br><span class="line"></span><br><span class="line">scrollHeight =  内容margin box的高度；</span><br></pre></td></tr></table></figure><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = clientHeight =<span class="built_in">window</span>视窗可见高度;</span><br><span class="line"></span><br><span class="line">scrollHeight = body.offsetHeight+ body.margin;</span><br></pre></td></tr></table></figure><p><mark>因此，只是获取窗口可见部分高度，在IE7中得用documentElement.clientHeight，获取整个页面内容的大小，则用documentElement.scrollHeight。</mark></p><blockquote><p>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding +border + height。</span><br><span class="line"></span><br><span class="line">clientHeight = padding +height - scrollbar.width。</span><br><span class="line"></span><br><span class="line">scrollHeight = padding + 内容margin box的高度</span><br></pre></td></tr></table></figure><p><mark>从结果分析，IE7认为scrollHeight 可以小于clientHeight。</mark></p><p><mark>offsetLeft = 元素border box左上角到父容器（不是offsetParent）的border box左上角的距离。</mark></p><h3 id="ie6"><a class="markdownIt-Anchor" href="#ie6"></a> <strong><mark>IE6</mark></strong></h3><blockquote><p>body</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = body.padding +内容margin box的高度。</span><br><span class="line"></span><br><span class="line">clientHeight = scrollHeight</span><br></pre></td></tr></table></figure><blockquote><p>documentElement</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight=画布高度，但offsetHeight&gt;= clientHeight</span><br><span class="line"></span><br><span class="line">clientHeight = <span class="built_in">window</span>窗口可见高度。</span><br><span class="line"></span><br><span class="line">scrollHeight = 内容的高度</span><br></pre></td></tr></table></figure><p><mark>因此，只是获取页面窗口的大小，在IE6中得用documentElement.clientHeight，获取整个页面内容的大小，则应该用documentElement.offsetHeight。</mark></p><blockquote><p>元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding +border + height。</span><br><span class="line"></span><br><span class="line">clientHeight = padding +height - scrollbar.width。</span><br><span class="line"></span><br><span class="line">scrollHeight = padding + 内容margin box的高度</span><br></pre></td></tr></table></figure><p><mark>从结果分析，IE6认为scrollHeight 可以小于clientHeight。</mark></p><p><mark>offsetLeft = 元素border box左上角到父容器（不是offsetParent）的border box左上角的距离。</mark></p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><ul><li><mark>IE6、IE7认为scrollHeight可以小于clientHeight</mark></li><li><mark>IE8、IE9和Firefox认为scrollHeight&gt;=clientHeight</mark></li><li><mark>取窗口可见部分高度，统一用documentElement.clientHeight即可</mark></li><li><mark>取页面内容的高度（如果内容高度比窗口高度小，取窗口高度)，则用documentElement.scrollHeight，只有Chrome需要使用body.scrollHeight</mark></li></ul><p>同理clientWidth、offsetWidth和scrollWidth的解释与上面相同，只是把高度换成宽度即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;clientheight&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#clientheight&quot;&gt;&lt;/a&gt; clientHeight&lt;/h4&gt;
&lt;p&gt;大部分浏览器对 clientHeight 都没有什么异议，认为是元素可视区域的高度，
      
    
    </summary>
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>手机强制横屏</title>
    <link href="https://qingshaoxi.github.io/blog/post/phone-horizontal.html"/>
    <id>https://qingshaoxi.github.io/blog/post/phone-horizontal.html</id>
    <published>2017-04-27T11:51:14.000Z</published>
    <updated>2019-02-27T07:32:29.944Z</updated>
    
    <content type="html"><![CDATA[<p>页面打开，直接横屏显示。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;手机强制横屏&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">这是一个横屏测试</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.bootcss.com/</span>jquery/<span class="number">3.0</span><span class="number">.0</span>/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  $(window).on('load resize',function()&#123;</span></span><br><span class="line"><span class="string">    var w = window.innerWidth, h = window.innerHeight;</span></span><br><span class="line"><span class="string">    var $container = $('.main');</span></span><br><span class="line"><span class="string">    if (w&lt;h) &#123;</span></span><br><span class="line"><span class="string">        $container.css(&#123;</span></span><br><span class="line"><span class="string">            'width': h,</span></span><br><span class="line"><span class="string">            'height': w,</span></span><br><span class="line"><span class="string">            'transform': 'rotate(90deg)',</span></span><br><span class="line"><span class="string">            '-webkit-transform': 'rotate(90deg)',</span></span><br><span class="line"><span class="string">            'transform-origin': w/h/2*100+'% 50%',</span></span><br><span class="line"><span class="string">            '-webkit-transform-origin': w/h/2*100+'% 50%'</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        $container.removeAttr('style');</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面打开，直接横屏显示。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/categories/Javascript/"/>
    
      <category term="Jquery" scheme="https://qingshaoxi.github.io/blog/categories/Javascript/Jquery/"/>
    
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/tags/Javascript/"/>
    
      <category term="Jquery" scheme="https://qingshaoxi.github.io/blog/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>每周烧脑-2</title>
    <link href="https://qingshaoxi.github.io/blog/post/burn-brain-2.html"/>
    <id>https://qingshaoxi.github.io/blog/post/burn-brain-2.html</id>
    <published>2017-04-15T11:47:50.000Z</published>
    <updated>2019-02-27T07:32:29.921Z</updated>
    
    <content type="html"><![CDATA[<p>如图所示，有一堵由高度相同但长度不同的砖块砌成的墙，墙的每一层的总长度相同。你需要从上到下画一条垂线，使得这条线切断的砖块最少（注意，不可以在最左或最右边画线），并返回被切断的砖的数量。</p><p>输入的数据是一个数组的数组，每一个子数组代表一层，元素是这一层从左到右每块砖的长度。</p><a id="more"></a><p>如上图的输入是：<br>[[1,2,2,1], [3,1,2], [1,3,2], [2,4], [3,1,2], [1,3,1,1]]<br>输出是2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> splitWall = <span class="function"><span class="keyword">function</span>(<span class="params">wall</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sum = [],sameArr = [],count = <span class="number">0</span>,same = <span class="number">0</span>;     <span class="comment">//sum由每个数组累加的和的值组成，sameArr由累加和相同的数组的个数组成，count为累加和，same为累加和相同的数组的个数;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;wall.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;wall[i].length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">count = count+wall[i][j];</span><br><span class="line">sum.push(count);</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;sum.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> sumNew = sum.sort();</span><br><span class="line"><span class="keyword">if</span>(sumNew[i] == sumNew[i+<span class="number">1</span>] &amp;&amp; sumNew[i] == sumNew[i<span class="number">-1</span>])&#123;</span><br><span class="line">same++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(sumNew[i] != sumNew[i+<span class="number">1</span>] &amp;&amp; sumNew[i] != sumNew[i<span class="number">-1</span>])&#123;</span><br><span class="line">same = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">same = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">sameArr.push(same);</span><br><span class="line">&#125;</span><br><span class="line">same = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, sameArr);</span><br><span class="line"><span class="keyword">var</span> diff = wall.length - same;</span><br><span class="line"><span class="keyword">return</span> diff;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">6</span>],[<span class="number">6</span>],[<span class="number">6</span>],[<span class="number">6</span>],[<span class="number">6</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">6</span>],[<span class="number">3</span>,<span class="number">3</span>]];  </span><br><span class="line">alert(splitWall(arr));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如图所示，有一堵由高度相同但长度不同的砖块砌成的墙，墙的每一层的总长度相同。你需要从上到下画一条垂线，使得这条线切断的砖块最少（注意，不可以在最左或最右边画线），并返回被切断的砖的数量。&lt;/p&gt;
&lt;p&gt;输入的数据是一个数组的数组，每一个子数组代表一层，元素是这一层从左到右每块砖的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>git命令集合</title>
    <link href="https://qingshaoxi.github.io/blog/post/git-cmd.html"/>
    <id>https://qingshaoxi.github.io/blog/post/git-cmd.html</id>
    <published>2017-04-07T14:09:51.000Z</published>
    <updated>2019-02-27T07:32:29.929Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初始化本地git仓库创建新仓库"><a class="markdownIt-Anchor" href="#初始化本地git仓库创建新仓库"></a> 初始化本地git仓库（创建新仓库）</h4><pre><code>    git init    </code></pre><h4 id="配置用户名"><a class="markdownIt-Anchor" href="#配置用户名"></a> 配置用户名</h4><pre><code>git config --global user.name &quot;xxx&quot; </code></pre><h4 id="配置邮件"><a class="markdownIt-Anchor" href="#配置邮件"></a> 配置邮件</h4><pre><code>git config --global user.email &quot;xxx@xxx.com&quot;  </code></pre><a id="more"></a><h4 id="clone远程仓库"><a class="markdownIt-Anchor" href="#clone远程仓库"></a> clone远程仓库</h4><pre><code>git clone git+ssh://git@192.168.53.168/VT.git </code></pre><h4 id="查看当前版本状态是否修改"><a class="markdownIt-Anchor" href="#查看当前版本状态是否修改"></a> 查看当前版本状态（是否修改）</h4><pre><code>git status</code></pre><h4 id="添加xyz文件至index"><a class="markdownIt-Anchor" href="#添加xyz文件至index"></a> 添加xyz文件至index</h4><pre><code>git add xyz  </code></pre><h4 id="增加当前子目录下所有更改过的文件至index"><a class="markdownIt-Anchor" href="#增加当前子目录下所有更改过的文件至index"></a> 增加当前子目录下所有更改过的文件至index</h4><pre><code>git add .  </code></pre><h4 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h4><pre><code>git commit -m 'xxx'  </code></pre><h4 id="合并上一次提交用于反复修改"><a class="markdownIt-Anchor" href="#合并上一次提交用于反复修改"></a> 合并上一次提交（用于反复修改）</h4><pre><code>git commit --amend -m 'xxx'  </code></pre><h4 id="将add和commit合为一步"><a class="markdownIt-Anchor" href="#将add和commit合为一步"></a> 将add和commit合为一步</h4><pre><code>git commit -am 'xxx'</code></pre><h4 id="删除index中的文件"><a class="markdownIt-Anchor" href="#删除index中的文件"></a> 删除index中的文件</h4><pre><code>git rm xxx    </code></pre><h4 id="递归删除"><a class="markdownIt-Anchor" href="#递归删除"></a> 递归删除</h4><pre><code>git rm -r * </code></pre><h4 id="显示提交日志"><a class="markdownIt-Anchor" href="#显示提交日志"></a> 显示提交日志</h4><pre><code>git log    </code></pre><h4 id="显示1行日志-n为n行"><a class="markdownIt-Anchor" href="#显示1行日志-n为n行"></a> 显示1行日志 -n为n行</h4><pre><code>git log -1   </code></pre><h4 id="显示提交日志及相关变动文件"><a class="markdownIt-Anchor" href="#显示提交日志及相关变动文件"></a> 显示提交日志及相关变动文件</h4><pre><code>git log --stat git log -p -m</code></pre><h4 id="显示某个提交的详细内容"><a class="markdownIt-Anchor" href="#显示某个提交的详细内容"></a> 显示某个提交的详细内容</h4><pre><code>git show dfb02e6e4f2f7b573337763e5c0013802e392818 </code></pre><h4 id="可只用commitid的前几位"><a class="markdownIt-Anchor" href="#可只用commitid的前几位"></a> 可只用commitid的前几位</h4><pre><code>git show dfb02</code></pre><h4 id="显示head提交日志"><a class="markdownIt-Anchor" href="#显示head提交日志"></a> 显示HEAD提交日志</h4><pre><code>git show HEAD </code></pre><h4 id="显示head的父上一个版本的提交日志-为上两个版本5为上5个版本"><a class="markdownIt-Anchor" href="#显示head的父上一个版本的提交日志-为上两个版本5为上5个版本"></a> 显示HEAD的父（上一个版本）的提交日志 ^<sup>为上两个版本</sup>5为上5个版本</h4><pre><code>git show HEAD^ </code></pre><h4 id="显示已存在的tag"><a class="markdownIt-Anchor" href="#显示已存在的tag"></a> 显示已存在的tag</h4><pre><code>git tag </code></pre><h4 id="增加v20的tag"><a class="markdownIt-Anchor" href="#增加v20的tag"></a> 增加v2.0的tag</h4><pre><code>git tag -a v2.0 -m 'xxx' </code></pre><h4 id="显示v20的日志及详细内容"><a class="markdownIt-Anchor" href="#显示v20的日志及详细内容"></a> 显示v2.0的日志及详细内容</h4><pre><code>git show v2.0 </code></pre><h4 id="显示v20的日志"><a class="markdownIt-Anchor" href="#显示v20的日志"></a> 显示v2.0的日志</h4><pre><code>git log v2.0  </code></pre><h4 id="显示所有未添加至index的变更"><a class="markdownIt-Anchor" href="#显示所有未添加至index的变更"></a> 显示所有未添加至index的变更</h4><pre><code>git diff  </code></pre><h4 id="显示所有已添加index但还未commit的变更"><a class="markdownIt-Anchor" href="#显示所有已添加index但还未commit的变更"></a> 显示所有已添加index但还未commit的变更</h4><pre><code>git diff --cached</code></pre><h4 id="比较与上一个版本的差异"><a class="markdownIt-Anchor" href="#比较与上一个版本的差异"></a> 比较与上一个版本的差异</h4><pre><code>git diff HEAD^ </code></pre><h4 id="比较与head版本lib目录的差异"><a class="markdownIt-Anchor" href="#比较与head版本lib目录的差异"></a> 比较与HEAD版本lib目录的差异</h4><pre><code>git diff HEAD -- ./lib </code></pre><h4 id="比较远程分支master上有本地分支master上没有的"><a class="markdownIt-Anchor" href="#比较远程分支master上有本地分支master上没有的"></a> 比较远程分支master上有本地分支master上没有的</h4><pre><code>git diff origin/master..master </code></pre><h4 id="只显示差异的文件不显示具体内容"><a class="markdownIt-Anchor" href="#只显示差异的文件不显示具体内容"></a> 只显示差异的文件，不显示具体内容</h4><pre><code>git diff origin/master..master --stat </code></pre><h4 id="增加远程定义用于pushpullfetch"><a class="markdownIt-Anchor" href="#增加远程定义用于pushpullfetch"></a> 增加远程定义（用于push/pull/fetch）</h4><pre><code>git remote add origin git+ssh://git@192.168.53.168/VT.git</code></pre><h4 id="显示本地分支"><a class="markdownIt-Anchor" href="#显示本地分支"></a> 显示本地分支</h4><pre><code>git branch </code></pre><h4 id="显示包含提交50089的分支"><a class="markdownIt-Anchor" href="#显示包含提交50089的分支"></a> 显示包含提交50089的分支</h4><pre><code>git branch --contains 50089                            </code></pre><h4 id="显示所有分支"><a class="markdownIt-Anchor" href="#显示所有分支"></a> 显示所有分支</h4><pre><code>git branch -a </code></pre><h4 id="显示所有原创分支"><a class="markdownIt-Anchor" href="#显示所有原创分支"></a> 显示所有原创分支</h4><pre><code>git branch -r                            </code></pre><h4 id="显示所有已合并到当前分支的分支"><a class="markdownIt-Anchor" href="#显示所有已合并到当前分支的分支"></a> 显示所有已合并到当前分支的分支</h4><pre><code>git branch --merged </code></pre><h4 id="显示所有未合并到当前分支的分支"><a class="markdownIt-Anchor" href="#显示所有未合并到当前分支的分支"></a> 显示所有未合并到当前分支的分支</h4><pre><code>git branch --no-merged   </code></pre><h4 id="本地分支改名"><a class="markdownIt-Anchor" href="#本地分支改名"></a> 本地分支改名</h4><pre><code>git branch -m master master_copy  </code></pre><h4 id="从当前分支创建新分支master_copy并检出"><a class="markdownIt-Anchor" href="#从当前分支创建新分支master_copy并检出"></a> 从当前分支创建新分支master_copy并检出</h4><pre><code>git checkout -b master_copy                          </code></pre><h4 id="上面的完整版"><a class="markdownIt-Anchor" href="#上面的完整版"></a> 上面的完整版</h4><pre><code>git checkout -b master master_copy </code></pre><h4 id="检出已存在的featuresperformance分支"><a class="markdownIt-Anchor" href="#检出已存在的featuresperformance分支"></a> 检出已存在的features/performance分支</h4><pre><code>git checkout features/performance </code></pre><h4 id="检出远程分支hotfixesbjvep933并创建本地跟踪分支"><a class="markdownIt-Anchor" href="#检出远程分支hotfixesbjvep933并创建本地跟踪分支"></a> 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</h4><pre><code>git checkout --track hotfixes/BJVEP933</code></pre><h4 id="检出版本v20"><a class="markdownIt-Anchor" href="#检出版本v20"></a> 检出版本v2.0</h4><pre><code>git checkout v2.0</code></pre><h4 id="从远程分支develop创建新本地分支devel并检出"><a class="markdownIt-Anchor" href="#从远程分支develop创建新本地分支devel并检出"></a> 从远程分支develop创建新本地分支devel并检出</h4><pre><code>git checkout -b devel origin/develop</code></pre><h4 id="检出head版本的readme文件可用于修改错误回退"><a class="markdownIt-Anchor" href="#检出head版本的readme文件可用于修改错误回退"></a> 检出head版本的README文件（可用于修改错误回退）</h4><pre><code>git checkout -- README</code></pre><h4 id="合并远程master分支至当前分支"><a class="markdownIt-Anchor" href="#合并远程master分支至当前分支"></a> 合并远程master分支至当前分支</h4><pre><code>git merge origin/master </code></pre><h4 id="合并提交ff44785404a8e的修改"><a class="markdownIt-Anchor" href="#合并提交ff44785404a8e的修改"></a> 合并提交ff44785404a8e的修改</h4><pre><code>git cherry-pick ff44785404a8e </code></pre><h4 id="将当前分支push到远程master分支"><a class="markdownIt-Anchor" href="#将当前分支push到远程master分支"></a> 将当前分支push到远程master分支</h4><pre><code>git push origin master </code></pre><h4 id="删除远程仓库的hotfixesbjvep933分支"><a class="markdownIt-Anchor" href="#删除远程仓库的hotfixesbjvep933分支"></a> 删除远程仓库的hotfixes/BJVEP933分支</h4><pre><code>git push origin :hotfixes/BJVEP933                      </code></pre><h4 id="把所有tag推送到远程仓库"><a class="markdownIt-Anchor" href="#把所有tag推送到远程仓库"></a> 把所有tag推送到远程仓库</h4><pre><code>git push --tags</code></pre><h4 id="获取所有远程分支不更新本地分支另需merge"><a class="markdownIt-Anchor" href="#获取所有远程分支不更新本地分支另需merge"></a> 获取所有远程分支（不更新本地分支，另需merge）</h4><pre><code>git fetch</code></pre><h4 id="获取所有原创分支并清除服务器上已删掉的分支"><a class="markdownIt-Anchor" href="#获取所有原创分支并清除服务器上已删掉的分支"></a> 获取所有原创分支并清除服务器上已删掉的分支</h4><pre><code>git fetch --prune </code></pre><h4 id="获取远程分支master并merge到当前分支"><a class="markdownIt-Anchor" href="#获取远程分支master并merge到当前分支"></a> 获取远程分支master并merge到当前分支</h4><pre><code>git pull origin master</code></pre><h4 id="重命名文件readme为readme2"><a class="markdownIt-Anchor" href="#重命名文件readme为readme2"></a> 重命名文件README为README2</h4><pre><code>git mv README README2</code></pre><h4 id="将当前版本重置为head通常用于merge失败回退"><a class="markdownIt-Anchor" href="#将当前版本重置为head通常用于merge失败回退"></a> 将当前版本重置为HEAD（通常用于merge失败回退）</h4><pre><code>git reset --hard HEADgit rebase</code></pre><h4 id="删除分支hotfixesbjvep933本分支修改已合并到其他分支"><a class="markdownIt-Anchor" href="#删除分支hotfixesbjvep933本分支修改已合并到其他分支"></a> 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</h4><pre><code>git branch -d hotfixes/BJVEP933</code></pre><h4 id="强制删除分支hotfixesbjvep933"><a class="markdownIt-Anchor" href="#强制删除分支hotfixesbjvep933"></a> 强制删除分支hotfixes/BJVEP933</h4><pre><code>git branch -D hotfixes/BJVEP933 </code></pre><h4 id="列出git-index包含的文件"><a class="markdownIt-Anchor" href="#列出git-index包含的文件"></a> 列出git index包含的文件</h4><pre><code>git ls-files</code></pre><h4 id="图示当前分支历史"><a class="markdownIt-Anchor" href="#图示当前分支历史"></a> 图示当前分支历史</h4><pre><code>git show-branch </code></pre><h4 id="图示所有分支历史"><a class="markdownIt-Anchor" href="#图示所有分支历史"></a> 图示所有分支历史</h4><pre><code>git show-branch --all </code></pre><h4 id="显示提交历史对应的文件修改"><a class="markdownIt-Anchor" href="#显示提交历史对应的文件修改"></a> 显示提交历史对应的文件修改</h4><pre><code>git whatchanged</code></pre><h4 id="撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818"><a class="markdownIt-Anchor" href="#撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818"></a> 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</h4><pre><code>git revert dfb02e6e4f2f7b573337763e5c0013802e392818</code></pre><h4 id="内部命令显示某个git对象"><a class="markdownIt-Anchor" href="#内部命令显示某个git对象"></a> 内部命令：显示某个git对象</h4><pre><code>git ls-tree HEAD </code></pre><h4 id="内部命令显示某个ref对于的sha1-hash"><a class="markdownIt-Anchor" href="#内部命令显示某个ref对于的sha1-hash"></a> 内部命令：显示某个ref对于的SHA1 HASH</h4><pre><code>git rev-parse v2.0</code></pre><h4 id="显示所有提交包括孤立节点"><a class="markdownIt-Anchor" href="#显示所有提交包括孤立节点"></a> 显示所有提交，包括孤立节点</h4><pre><code>git refloggit show HEAD@{5}</code></pre><h4 id="显示master分支昨天的状态"><a class="markdownIt-Anchor" href="#显示master分支昨天的状态"></a> 显示master分支昨天的状态</h4><pre><code>git show master@{yesterday}</code></pre><h4 id="图示提交日志"><a class="markdownIt-Anchor" href="#图示提交日志"></a> 图示提交日志</h4><pre><code>git log --pretty=format:'%h %s' --graphgit show HEAD~3git show -s --pretty=raw 2be7fcb476</code></pre><h4 id="暂存当前修改将所有至为head状态"><a class="markdownIt-Anchor" href="#暂存当前修改将所有至为head状态"></a> 暂存当前修改，将所有至为HEAD状态</h4><pre><code>git stash</code></pre><h4 id="查看所有暂存"><a class="markdownIt-Anchor" href="#查看所有暂存"></a> 查看所有暂存</h4><pre><code>git stash list</code></pre><h4 id="参考第一次暂存"><a class="markdownIt-Anchor" href="#参考第一次暂存"></a> 参考第一次暂存</h4><pre><code>git stash show -p stash@{0} </code></pre><h4 id="应用第一次暂存"><a class="markdownIt-Anchor" href="#应用第一次暂存"></a> 应用第一次暂存</h4><pre><code>git stash apply stash@{0}</code></pre><h4 id="文件中搜索文本delete-from"><a class="markdownIt-Anchor" href="#文件中搜索文本delete-from"></a> 文件中搜索文本“delete from”</h4><pre><code>git grep &quot;delete from&quot;git grep -e 'define' --and -e SORT_DIRENTgit gcgit fsck</code></pre><p><img src="/uploads/git.png" alt="git常用命令"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;初始化本地git仓库创建新仓库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#初始化本地git仓库创建新仓库&quot;&gt;&lt;/a&gt; 初始化本地git仓库（创建新仓库）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;    git init    
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;配置用户名&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#配置用户名&quot;&gt;&lt;/a&gt; 配置用户名&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;xxx&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;配置邮件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#配置邮件&quot;&gt;&lt;/a&gt; 配置邮件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.email &amp;quot;xxx@xxx.com&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="git" scheme="https://qingshaoxi.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://qingshaoxi.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>每周烧脑-1</title>
    <link href="https://qingshaoxi.github.io/blog/post/burn-brain-1.html"/>
    <id>https://qingshaoxi.github.io/blog/post/burn-brain-1.html</id>
    <published>2017-04-02T16:29:49.000Z</published>
    <updated>2019-02-27T07:32:29.920Z</updated>
    
    <content type="html"><![CDATA[<p>完美数<br>完美数定义如下：</p><ol><li>正整数</li><li>是自己的因数（除自身以外）之和</li></ol><p>如28是完美数，因为 1 + 2 + 4 + 7 + 14 = 28</p><p>给定一个数字，判断是否是完美数：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPerfectNumber</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(number));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = num; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span>(number%i == <span class="number">0</span>)&#123;</span><br><span class="line">sum = sum + i +number/i; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((sum+<span class="number">1</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">alert(<span class="string">"此数为完美数！因子和为"</span>+(sum+<span class="number">1</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"此数非完美数！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>此题在于减少运算量，先对其进行开方处理。<br>有更简便的，可回复贴码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完美数&lt;br&gt;
完美数定义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正整数&lt;/li&gt;
&lt;li&gt;是自己的因数（除自身以外）之和&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如28是完美数，因为 1 + 2 + 4 + 7 + 14 = 28&lt;/p&gt;
&lt;p&gt;给定一个数字，判断是否是完美数：&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://qingshaoxi.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>百度网盘自定义提取码</title>
    <link href="https://qingshaoxi.github.io/blog/post/baidu-drive.html"/>
    <id>https://qingshaoxi.github.io/blog/post/baidu-drive.html</id>
    <published>2017-03-15T15:25:00.000Z</published>
    <updated>2019-02-27T07:32:29.918Z</updated>
    
    <content type="html"><![CDATA[<p>请按照以下步骤进行操作：</p><p>在浏览器中打开百度云盘，选中需要分享的文件，然后点击分享按钮；<br>点击分享按钮后会弹出一个模态框，先不管它，按 F12 打开开发者工具，切换至控制台（Console），将以下代码复制粘贴到控制台，然后回车；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javascript: <span class="built_in">require</span>([<span class="string">"function-widget-1:share/util/service/createLinkShare.js"</span>])</span><br><span class="line"> .prototype.makePrivatePassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prompt(<span class="string">"自定义百度网盘提取码"</span>, <span class="string">"host"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后点击创建私密链接，会弹出输入框，这时输入你想自定义的密码即可！<br>在此黑科技使用过程中需要注意以下事项：</p><p>请按照教程一步一步的进行，否则可能会出现错误或失败！<br>自定义的密码字符和必须为4（一个字母或数字的字符数是1，一个汉字的字符数是3，因此如果密码中有一个汉字则只能加一个字母或数字），如：1232、S猴等。</p><p>附GIF图片一张，动画演示让你更加明了：<br><img src="/uploads/baiduyun.gif" alt="tiquma"><br>本文转自老d博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请按照以下步骤进行操作：&lt;/p&gt;
&lt;p&gt;在浏览器中打开百度云盘，选中需要分享的文件，然后点击分享按钮；&lt;br&gt;
点击分享按钮后会弹出一个模态框，先不管它，按 F12 打开开发者工具，切换至控制台（Console），将以下代码复制粘贴到控制台，然后回车；&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javascript: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&quot;function-widget-1:share/util/service/createLinkShare.js&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .prototype.makePrivatePassword = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prompt(&lt;span class=&quot;string&quot;&gt;&quot;自定义百度网盘提取码&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;host&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://qingshaoxi.github.io/blog/categories/Technology/"/>
    
      <category term="Github" scheme="https://qingshaoxi.github.io/blog/categories/Technology/Github/"/>
    
    
      <category term="黑科技" scheme="https://qingshaoxi.github.io/blog/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>你所不知道的Host</title>
    <link href="https://qingshaoxi.github.io/blog/post/host.html"/>
    <id>https://qingshaoxi.github.io/blog/post/host.html</id>
    <published>2017-03-11T13:37:38.000Z</published>
    <updated>2019-02-27T07:32:29.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hosts是什么"><a class="markdownIt-Anchor" href="#hosts是什么"></a> Hosts是什么？</h1><hr><p>其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2><h3 id="1-修改hosts的作用是什么"><a class="markdownIt-Anchor" href="#1-修改hosts的作用是什么"></a> 1. 修改hosts的作用是什么？</h3><ul><li>可以加快域名解析</li><li>可以进行谷歌、脸书、推特等国外网站的浏览</li><li>屏蔽广告、网站等等</li></ul><h3 id="2-hosts的位置"><a class="markdownIt-Anchor" href="#2-hosts的位置"></a> 2. hosts的位置</h3><blockquote><p><em><strong>windows</strong></em> xp/2003/vista/2008/7/8/10用户HOSTS文件是在&quot;<strong>c:\windows\system32\drivers\etc\hosts</strong>&quot;<br><em><strong>Mac***与***Android</strong></em>、**<em>iOS<em><strong>用户HOSTS文件是在&quot;</strong>\etc\hosts</em></em>&quot;</p></blockquote><h3 id="3-如何修改"><a class="markdownIt-Anchor" href="#3-如何修改"></a> 3. 如何修改</h3><ul><li>直接编辑本机Hosts文件</li><li>牛人写好的直接替换<br><a href="https://github.com/racaljk/hosts" target="_blank" rel="noopener">github</a><br><a href="https://pan.baidu.com/s/1dF67DRz" target="_blank" rel="noopener">百度云</a></li></ul><blockquote><p>提取密码：host</p></blockquote><pre><code>注：这些网站都需要https的协议打开，国内某些软件会强制http，卸载即可。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hosts是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hosts是什么&quot;&gt;&lt;/a&gt; Hosts是什么？&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。&lt;/p&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://qingshaoxi.github.io/blog/categories/Technology/"/>
    
      <category term="Github" scheme="https://qingshaoxi.github.io/blog/categories/Technology/Github/"/>
    
    
      <category term="黑科技" scheme="https://qingshaoxi.github.io/blog/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>六州歌头·少年侠气</title>
    <link href="https://qingshaoxi.github.io/blog/post/shao-nian-xia-qi.html"/>
    <id>https://qingshaoxi.github.io/blog/post/shao-nian-xia-qi.html</id>
    <published>2017-03-11T09:12:49.000Z</published>
    <updated>2019-02-27T07:32:29.950Z</updated>
    
    <content type="html"><![CDATA[<p>少年侠气，交结五都雄。肝胆洞。毛发耸。立谈中。死生同。一诺千金重。推翘勇。矜豪纵。轻盖拥。联飞鞚。斗城东。轰饮酒垆，春色浮寒瓮。吸海垂虹。闲呼鹰嗾犬，白羽摘雕弓。狡穴俄空。乐匆匆。<br>似黄粱梦。辞丹凤。明月共。漾孤篷。官冗從。怀倥偬。落尘笼。簿书丛。鹖弁如云众。供粗用。忽奇功。笳鼓动。渔阳弄。思悲翁。不请长缨，系取天骄种。剑吼西风。恨登山临水，手寄七弦桐。目送归鸿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;少年侠气，交结五都雄。肝胆洞。毛发耸。立谈中。死生同。一诺千金重。推翘勇。矜豪纵。轻盖拥。联飞鞚。斗城东。轰饮酒垆，春色浮寒瓮。吸海垂虹。闲呼鹰嗾犬，白羽摘雕弓。狡穴俄空。乐匆匆。&lt;br&gt;
似黄粱梦。辞丹凤。明月共。漾孤篷。官冗從。怀倥偬。落尘笼。簿书丛。鹖弁如云众。供粗用
      
    
    </summary>
    
    
      <category term="poetry" scheme="https://qingshaoxi.github.io/blog/tags/poetry/"/>
    
  </entry>
  
  <entry>
    <title>满江红·写怀</title>
    <link href="https://qingshaoxi.github.io/blog/post/xie-huai.html"/>
    <id>https://qingshaoxi.github.io/blog/post/xie-huai.html</id>
    <published>2017-03-11T05:04:41.000Z</published>
    <updated>2019-02-27T07:32:29.964Z</updated>
    
    <content type="html"><![CDATA[<p>怒发冲冠，凭栏处、潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。三十功名尘与土，八千里路云和月。莫等闲，白了少年头，空悲切！<br>靖康耻，犹未雪。臣子恨，何时灭！驾长车，踏破贺兰山缺。壮志饥餐胡虏肉，笑谈渴饮匈奴血。待从头、收拾旧山河，朝天阙。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怒发冲冠，凭栏处、潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。三十功名尘与土，八千里路云和月。莫等闲，白了少年头，空悲切！&lt;br&gt;
靖康耻，犹未雪。臣子恨，何时灭！驾长车，踏破贺兰山缺。壮志饥餐胡虏肉，笑谈渴饮匈奴血。待从头、收拾旧山河，朝天阙。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="poetry" scheme="https://qingshaoxi.github.io/blog/tags/poetry/"/>
    
  </entry>
  
  <entry>
    <title>微信端h5视频</title>
    <link href="https://qingshaoxi.github.io/blog/post/weixin-video.html"/>
    <id>https://qingshaoxi.github.io/blog/post/weixin-video.html</id>
    <published>2017-02-11T13:37:38.000Z</published>
    <updated>2019-02-27T07:32:29.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信端视频设置"><a class="markdownIt-Anchor" href="#微信端视频设置"></a> 微信端视频设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;video <span class="class"><span class="keyword">class</span></span>=<span class="string">"video-source"</span></span><br><span class="line">     width=<span class="string">"100%"</span></span><br><span class="line">　　　height=<span class="string">"240px"</span> </span><br><span class="line">     controls  <span class="comment">/*这个属性规定浏览器为该视频提供播放控件*/</span>  </span><br><span class="line">     style=<span class="string">"object-fit:fill"</span>  <span class="comment">/*避免视频上下出现黑边*/</span></span><br><span class="line">     webkit-playsinline=<span class="string">"true"</span>  <span class="comment">/*这个属性是ios 10中设置可以让视频在页面内播放*/</span>  </span><br><span class="line">     x-webkit-airplay=<span class="string">"true"</span>  <span class="comment">/*这个属性还不知道作用*/</span> </span><br><span class="line">     playsinline=<span class="string">"true"</span>  <span class="comment">/*IOS微信浏览器支持小窗内播放*/</span> </span><br><span class="line">     x5-video-player-type=<span class="string">"h5"</span> <span class="comment">/*启用H5播放器,是wechat安卓版特性*/</span></span><br><span class="line">     x5-video-orientation=<span class="string">"portraint"</span> <span class="comment">/*播放器支付的方向，landscape横屏，portraint竖屏，默认值为竖屏*/</span></span><br><span class="line">     x5-video-player-fullscreen=<span class="string">"true"</span> <span class="comment">/*全屏设置，设置为 true 是防止横屏*/</span></span><br><span class="line">     preload=<span class="string">"auto"</span> <span class="comment">/*这个属性规定页面加载完成后载入视频*/</span> </span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>安卓微信端视频问题</p></blockquote><ol><li>X5内核 自带播放器，默认点击全屏播放</li><li>退出全屏之后，仍有一个浮层悬浮在视频div上</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微信端视频设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微信端视频设置&quot;&gt;&lt;/a&gt; 微信端视频设置&lt;/h2&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;video &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;video-source&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     width=&lt;span class=&quot;string&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　height=&lt;span class=&quot;string&quot;&gt;&quot;240px&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     controls  &lt;span class=&quot;comment&quot;&gt;/*这个属性规定浏览器为该视频提供播放控件*/&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     style=&lt;span class=&quot;string&quot;&gt;&quot;object-fit:fill&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;/*避免视频上下出现黑边*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     webkit-playsinline=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;/*这个属性是ios 10中设置可以让视频在页面内播放*/&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     x-webkit-airplay=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;/*这个属性还不知道作用*/&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     playsinline=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;/*IOS微信浏览器支持小窗内播放*/&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     x5-video-player-type=&lt;span class=&quot;string&quot;&gt;&quot;h5&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*启用H5播放器,是wechat安卓版特性*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     x5-video-orientation=&lt;span class=&quot;string&quot;&gt;&quot;portraint&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*播放器支付的方向，landscape横屏，portraint竖屏，默认值为竖屏*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     x5-video-player-fullscreen=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*全屏设置，设置为 true 是防止横屏*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     preload=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*这个属性规定页面加载完成后载入视频*/&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/video&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="video" scheme="https://qingshaoxi.github.io/blog/categories/video/"/>
    
      <category term="weixin" scheme="https://qingshaoxi.github.io/blog/categories/video/weixin/"/>
    
    
      <category term="黑科技" scheme="https://qingshaoxi.github.io/blog/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>自定义滚动条</title>
    <link href="https://qingshaoxi.github.io/blog/post/scrollbar.html"/>
    <id>https://qingshaoxi.github.io/blog/post/scrollbar.html</id>
    <published>2017-01-11T13:30:38.000Z</published>
    <updated>2019-02-27T07:32:29.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义滚动条样式"><a class="markdownIt-Anchor" href="#自定义滚动条样式"></a> 自定义滚动条样式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar 滚动条整体部分</span><br><span class="line">::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</span><br><span class="line">::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）</span><br><span class="line">::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</span><br><span class="line">::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</span><br><span class="line">::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</span><br><span class="line">::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="基础设置"><a class="markdownIt-Anchor" href="#基础设置"></a> 基础设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span></span><br><span class="line">::-webkit-scrollbar</span><br><span class="line">&#123;</span><br><span class="line">    width: <span class="number">16</span>px;</span><br><span class="line">    height: <span class="number">16</span>px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span></span><br><span class="line">::-webkit-scrollbar-track</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-box-shadow: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span></span><br><span class="line">::-webkit-scrollbar-thumb</span><br><span class="line">&#123;</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">    -webkit-box-shadow: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.3</span>);</span><br><span class="line">    background-color: #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细设置"><a class="markdownIt-Anchor" href="#详细设置"></a> 详细设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">:horizontal</span><br><span class="line"><span class="comment">//horizontal伪类适用于任何水平方向上的滚动条</span></span><br><span class="line"></span><br><span class="line">:vertical</span><br><span class="line"><span class="comment">//vertical伪类适用于任何垂直方向的滚动条</span></span><br><span class="line"></span><br><span class="line">:decrement</span><br><span class="line"><span class="comment">//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮</span></span><br><span class="line"></span><br><span class="line">:increment</span><br><span class="line"><span class="comment">//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮</span></span><br><span class="line"></span><br><span class="line">:start</span><br><span class="line"><span class="comment">//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面</span></span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"><span class="comment">//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面</span></span><br><span class="line"></span><br><span class="line">:double-button</span><br><span class="line"><span class="comment">//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。</span></span><br><span class="line"></span><br><span class="line">:single-button</span><br><span class="line"><span class="comment">//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。</span></span><br><span class="line"></span><br><span class="line">:no-button</span><br><span class="line">no-button伪类表示轨道结束的位置没有按钮。</span><br><span class="line"></span><br><span class="line">:corner-present</span><br><span class="line"><span class="comment">//corner-present伪类表示滚动条的角落是否存在。</span></span><br><span class="line"></span><br><span class="line">:<span class="built_in">window</span>-inactive</span><br><span class="line"><span class="comment">//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track-piece:start &#123;</span><br><span class="line"><span class="comment">/*滚动条上半边或左半边*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb:<span class="built_in">window</span>-inactive &#123;</span><br><span class="line"><span class="comment">/*当焦点不在当前区域滑块的状态*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-button:horizontal:decrement:hover &#123;</span><br><span class="line"><span class="comment">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义滚动条样式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自定义滚动条样式&quot;&gt;&lt;/a&gt; 自定义滚动条样式&lt;/h2&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar 滚动条整体部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="scrollbar" scheme="https://qingshaoxi.github.io/blog/categories/scrollbar/"/>
    
      <category term="chrome" scheme="https://qingshaoxi.github.io/blog/categories/scrollbar/chrome/"/>
    
    
      <category term="黑科技" scheme="https://qingshaoxi.github.io/blog/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout 0</title>
    <link href="https://qingshaoxi.github.io/blog/post/setTimeout.html"/>
    <id>https://qingshaoxi.github.io/blog/post/setTimeout.html</id>
    <published>2017-01-04T12:30:38.000Z</published>
    <updated>2019-02-27T07:32:29.949Z</updated>
    
    <content type="html"><![CDATA[<p>setTimeout(function(){},0)</p><a id="more"></a><p>调用 setTimeout 函数会在一个时间段过去后在队列中添加一个消息。这个时间段作为函数的第二个参数被传入。如果队列中没有其它消息，消息会被马上处理。但是，如果有其它消息，setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少的时间 而非确切的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is the start'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is a msg from call back'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is just a message'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">cb1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is a msg from call back1'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this is the  end'</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// "this is the start"</span></span><br><span class="line"><span class="comment">// "this is just a message"</span></span><br><span class="line"><span class="comment">// "this is the end"</span></span><br><span class="line"><span class="comment">// "this is a msg from call back"</span></span><br><span class="line"><span class="comment">// "this is a msg from call back1"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;setTimeout(function(){},0)&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://qingshaoxi.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="黑科技" scheme="https://qingshaoxi.github.io/blog/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
</feed>
